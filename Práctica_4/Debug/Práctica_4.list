
Pr√°ctica_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003024  08003024  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800302c  0800302c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000f4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4dc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bb  00000000  00000000  0002d58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262ed  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3e2  00000000  00000000  000567bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e22bd  00000000  00000000  00063b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145e5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002044  00000000  00000000  00145eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ef0 	.word	0x08002ef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002ef0 	.word	0x08002ef0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <BSP_LED_Init+0x2e>
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <BSP_LED_Init+0x94>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a1e      	ldr	r2, [pc, #120]	; (800061c <BSP_LED_Init+0x94>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <BSP_LED_Init+0x94>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	e00d      	b.n	80005d2 <BSP_LED_Init+0x4a>
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <BSP_LED_Init+0x94>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <BSP_LED_Init+0x94>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <BSP_LED_Init+0x94>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <BSP_LED_Init+0x98>)
 80005d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <BSP_LED_Init+0x9c>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f107 0214 	add.w	r2, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fae8 	bl	8000bcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a09      	ldr	r2, [pc, #36]	; (8000624 <BSP_LED_Init+0x9c>)
 8000600:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <BSP_LED_Init+0x98>)
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fca0 	bl	8000f54 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	08002fd0 	.word	0x08002fd0
 8000624:	20000000 	.word	0x20000000

08000628 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <BSP_LED_On+0x2c>)
 8000636:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <BSP_LED_On+0x30>)
 800063e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f000 fc85 	bl	8000f54 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	08002fd0 	.word	0x08002fd0

0800065c <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <BSP_LED_Off+0x2c>)
 800066a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <BSP_LED_Off+0x30>)
 8000672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	f000 fc6b 	bl	8000f54 <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000
 800068c:	08002fd0 	.word	0x08002fd0

08000690 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <BSP_LED_Toggle+0x2c>)
 800069e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <BSP_LED_Toggle+0x30>)
 80006a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f000 fc6a 	bl	8000f86 <HAL_GPIO_TogglePin>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000
 80006c0:	08002fd0 	.word	0x08002fd0

080006c4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <BSP_PB_Init+0xa4>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <BSP_PB_Init+0xa4>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6313      	str	r3, [r2, #48]	; 0x30
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <BSP_PB_Init+0xa4>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d112      	bne.n	800071c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <BSP_PB_Init+0xa8>)
 800070c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000710:	f107 020c 	add.w	r2, r7, #12
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fa58 	bl	8000bcc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11d      	bne.n	800075e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800072c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000730:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <BSP_PB_Init+0xa8>)
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	f107 020c 	add.w	r2, r7, #12
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa43 	bl	8000bcc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000746:	2328      	movs	r3, #40	; 0x28
 8000748:	b25b      	sxtb	r3, r3
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fa05 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000754:	2328      	movs	r3, #40	; 0x28
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fa1c 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  }
}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	2000000c 	.word	0x2000000c

08000770 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <BSP_PB_GetState+0x28>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fbcb 	bl	8000f24 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000000c 	.word	0x2000000c

0800079c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <SystemInit+0x60>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <SystemInit+0x60>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <SystemInit+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <SystemInit+0x64>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <SystemInit+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <SystemInit+0x64>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <SystemInit+0x64>)
 80007c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SystemInit+0x64>)
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <SystemInit+0x68>)
 80007d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <SystemInit+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <SystemInit+0x64>)
 80007de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemInit+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SystemInit+0x60>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	609a      	str	r2, [r3, #8]
#endif
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	40023800 	.word	0x40023800
 8000804:	24003010 	.word	0x24003010

08000808 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800085c:	f000 f884 	bl	8000968 <HAL_IncTick>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f001 fed4 	bl	8002640 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20030000 	.word	0x20030000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	20000178 	.word	0x20000178

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_Init+0x34>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_Init+0x34>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x34>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x34>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f92b 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f000 fbb2 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023c00 	.word	0x40023c00

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f943 	bl	8000bb2 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000944:	f000 f90b 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000010 	.word	0x20000010
 8000960:	20000018 	.word	0x20000018
 8000964:	20000014 	.word	0x20000014

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000018 	.word	0x20000018
 800098c:	20000118 	.word	0x20000118

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000118 	.word	0x20000118

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff29 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff3e 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff8e 	bl	8000a9c <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff31 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e177      	b.n	8000ed8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8166 	bne.w	8000ed2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d130      	bne.n	8000c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 0201 	and.w	r2, r3, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d017      	beq.n	8000cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d123      	bne.n	8000d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	69b9      	ldr	r1, [r7, #24]
 8000d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0203 	and.w	r2, r3, #3
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80c0 	beq.w	8000ed2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a65      	ldr	r2, [pc, #404]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6e:	4a61      	ldr	r2, [pc, #388]	; (8000ef4 <HAL_GPIO_Init+0x328>)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <HAL_GPIO_Init+0x32c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d037      	beq.n	8000e0a <HAL_GPIO_Init+0x23e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a57      	ldr	r2, [pc, #348]	; (8000efc <HAL_GPIO_Init+0x330>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d031      	beq.n	8000e06 <HAL_GPIO_Init+0x23a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a56      	ldr	r2, [pc, #344]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d02b      	beq.n	8000e02 <HAL_GPIO_Init+0x236>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a55      	ldr	r2, [pc, #340]	; (8000f04 <HAL_GPIO_Init+0x338>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d025      	beq.n	8000dfe <HAL_GPIO_Init+0x232>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a54      	ldr	r2, [pc, #336]	; (8000f08 <HAL_GPIO_Init+0x33c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01f      	beq.n	8000dfa <HAL_GPIO_Init+0x22e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x340>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x22a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <HAL_GPIO_Init+0x344>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <HAL_GPIO_Init+0x348>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x222>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x21e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_GPIO_Init+0x350>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x21a>
 8000de2:	2309      	movs	r3, #9
 8000de4:	e012      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000de6:	230a      	movs	r3, #10
 8000de8:	e010      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000dea:	2308      	movs	r3, #8
 8000dec:	e00e      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000dee:	2307      	movs	r3, #7
 8000df0:	e00c      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000df2:	2306      	movs	r3, #6
 8000df4:	e00a      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x240>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	69fa      	ldr	r2, [r7, #28]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1c:	4935      	ldr	r1, [pc, #212]	; (8000ef4 <HAL_GPIO_Init+0x328>)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4e:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e78:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_GPIO_Init+0x354>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	f67f ae84 	bls.w	8000be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40021c00 	.word	0x40021c00
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	40022400 	.word	0x40022400
 8000f20:	40013c00 	.word	0x40013c00

08000f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	619a      	str	r2, [r3, #24]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	041a      	lsls	r2, r3, #16
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_UART_MspInit+0x9c>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_UART_MspInit+0x9c>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800102a:	2307      	movs	r3, #7
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_UART_MspInit+0xa0>)
 8001036:	f7ff fdc9 	bl	8000bcc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800103a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <HAL_UART_MspInit+0xa0>)
 800104c:	f7ff fdbe 	bl	8000bcc <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40020c00 	.word	0x40020c00

08001060 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_PWREx_EnableOverDrive+0x90>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_PWREx_EnableOverDrive+0x90>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_PWREx_EnableOverDrive+0x90>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_PWREx_EnableOverDrive+0x94>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff fc78 	bl	8000990 <HAL_GetTick>
 80010a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010a2:	e009      	b.n	80010b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010a4:	f7ff fc74 	bl	8000990 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b2:	d901      	bls.n	80010b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e01f      	b.n	80010f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_PWREx_EnableOverDrive+0x98>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d1ee      	bne.n	80010a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff fc60 	bl	8000990 <HAL_GetTick>
 80010d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010d2:	e009      	b.n	80010e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010d4:	f7ff fc5c 	bl	8000990 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e2:	d901      	bls.n	80010e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e007      	b.n	80010f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_PWREx_EnableOverDrive+0x98>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010f4:	d1ee      	bne.n	80010d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	420e0040 	.word	0x420e0040
 8001108:	40007000 	.word	0x40007000
 800110c:	420e0044 	.word	0x420e0044

08001110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e264      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d075      	beq.n	800121a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	4ba3      	ldr	r3, [pc, #652]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	4b9d      	ldr	r3, [pc, #628]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001152:	d10b      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d05b      	beq.n	8001218 <HAL_RCC_OscConfig+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d157      	bne.n	8001218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e23f      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x74>
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a90      	ldr	r2, [pc, #576]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a8a      	ldr	r2, [pc, #552]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a83      	ldr	r2, [pc, #524]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a80      	ldr	r2, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbe2 	bl	8000990 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fbde 	bl	8000990 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e204      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xc0>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fbce 	bl	8000990 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fbca 	bl	8000990 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1f0      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0xe8>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1c4      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4952      	ldr	r1, [pc, #328]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fb83 	bl	8000990 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fb7f 	bl	8000990 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e1a5      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4940      	ldr	r1, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb62 	bl	8000990 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb5e 	bl	8000990 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e184      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d030      	beq.n	800135c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fb42 	bl	8000990 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fb3e 	bl	8000990 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e164      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x200>
 800132e:	e015      	b.n	800135c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb2b 	bl	8000990 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fb27 	bl	8000990 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e14d      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a0 	beq.w	80014aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d121      	bne.n	80013ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff faed 	bl	8000990 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e011      	b.n	80013de <HAL_RCC_OscConfig+0x2ce>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470000 	.word	0x42470000
 80013c4:	42470e80 	.word	0x42470e80
 80013c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff fae0 	bl	8000990 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e106      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <HAL_RCC_OscConfig+0x4e4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x2f0>
 80013f2:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a80      	ldr	r2, [pc, #512]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x312>
 8001408:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a7a      	ldr	r2, [pc, #488]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001422:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a74      	ldr	r2, [pc, #464]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001432:	4a71      	ldr	r2, [pc, #452]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff faa5 	bl	8000990 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff faa1 	bl	8000990 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0c5      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x33a>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fa8f 	bl	8000990 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fa8b 	bl	8000990 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0af      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 809b 	beq.w	80015ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d05c      	beq.n	800157a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d141      	bne.n	800154c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x4ec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa5f 	bl	8000990 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fa5b 	bl	8000990 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e081      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	019b      	lsls	r3, r3, #6
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x4ec>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fa34 	bl	8000990 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fa30 	bl	8000990 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e056      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x41c>
 800154a:	e04e      	b.n	80015ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCC_OscConfig+0x4ec>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa1d 	bl	8000990 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fa19 	bl	8000990 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e03f      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x44a>
 8001578:	e037      	b.n	80015ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e032      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_RCC_OscConfig+0x4e8>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d028      	beq.n	80015e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d121      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d11a      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b6:	4013      	ands	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015be:	4293      	cmp	r3, r2
 80015c0:	d111      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40007000 	.word	0x40007000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	42470060 	.word	0x42470060

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0cc      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d90c      	bls.n	800163c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0b8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a58      	ldr	r2, [pc, #352]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800165e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	494d      	ldr	r1, [pc, #308]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d044      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d119      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d003      	beq.n	80016be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e06f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e067      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4934      	ldr	r1, [pc, #208]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f94e 	bl	8000990 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f94a 	bl	8000990 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20c      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e032      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001786:	f000 f821 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f8ae 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08002fd8 	.word	0x08002fd8
 80017c4:	20000010 	.word	0x20000010
 80017c8:	20000014 	.word	0x20000014

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e4:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d00d      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x40>
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	f200 80bd 	bhi.w	8001970 <HAL_RCC_GetSysClockFreq+0x1a4>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x34>
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fe:	e0b7      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b61      	ldr	r3, [pc, #388]	; (8001988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001802:	60bb      	str	r3, [r7, #8]
       break;
 8001804:	e0b7      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4b61      	ldr	r3, [pc, #388]	; (800198c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001808:	60bb      	str	r3, [r7, #8]
      break;
 800180a:	e0b4      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04d      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	461a      	mov	r2, r3
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	ea02 0800 	and.w	r8, r2, r0
 800183a:	ea03 0901 	and.w	r9, r3, r1
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	014b      	lsls	r3, r1, #5
 800184c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001850:	0142      	lsls	r2, r0, #5
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	ebb0 0008 	subs.w	r0, r0, r8
 800185a:	eb61 0109 	sbc.w	r1, r1, r9
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800186c:	0182      	lsls	r2, r0, #6
 800186e:	1a12      	subs	r2, r2, r0
 8001870:	eb63 0301 	sbc.w	r3, r3, r1
 8001874:	f04f 0000 	mov.w	r0, #0
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	00d9      	lsls	r1, r3, #3
 800187e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001882:	00d0      	lsls	r0, r2, #3
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	eb12 0208 	adds.w	r2, r2, r8
 800188c:	eb43 0309 	adc.w	r3, r3, r9
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	0259      	lsls	r1, r3, #9
 800189a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800189e:	0250      	lsls	r0, r2, #9
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f7fe fcee 	bl	8000290 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e04a      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	ea02 0400 	and.w	r4, r2, r0
 80018d6:	ea03 0501 	and.w	r5, r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ec:	0142      	lsls	r2, r0, #5
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	1b00      	subs	r0, r0, r4
 80018f4:	eb61 0105 	sbc.w	r1, r1, r5
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	018b      	lsls	r3, r1, #6
 8001902:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001906:	0182      	lsls	r2, r0, #6
 8001908:	1a12      	subs	r2, r2, r0
 800190a:	eb63 0301 	sbc.w	r3, r3, r1
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	00d9      	lsls	r1, r3, #3
 8001918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800191c:	00d0      	lsls	r0, r2, #3
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	1912      	adds	r2, r2, r4
 8001924:	eb45 0303 	adc.w	r3, r5, r3
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	0299      	lsls	r1, r3, #10
 8001932:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001936:	0290      	lsls	r0, r2, #10
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	461a      	mov	r2, r3
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f7fe fca2 	bl	8000290 <__aeabi_uldivmod>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4613      	mov	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	3301      	adds	r3, #1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001972:	60bb      	str	r3, [r7, #8]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	68bb      	ldr	r3, [r7, #8]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	007a1200 	.word	0x007a1200

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000010 	.word	0x20000010

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff0 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08002fe8 	.word	0x08002fe8

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffdc 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08002fe8 	.word	0x08002fe8

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e03f      	b.n	8001a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff facc 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f929 	bl	8001c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b08a      	sub	sp, #40	; 0x28
 8001a96:	af02      	add	r7, sp, #8
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	d17c      	bne.n	8001bac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_UART_Transmit+0x2c>
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e075      	b.n	8001bae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_UART_Transmit+0x3e>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e06e      	b.n	8001bae <HAL_UART_Transmit+0x11c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2221      	movs	r2, #33	; 0x21
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae6:	f7fe ff53 	bl	8000990 <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b00:	d108      	bne.n	8001b14 <HAL_UART_Transmit+0x82>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d104      	bne.n	8001b14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	e003      	b.n	8001b1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b24:	e02a      	b.n	8001b7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f840 	bl	8001bb6 <UART_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e036      	b.n	8001bae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	e007      	b.n	8001b6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1cf      	bne.n	8001b26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f810 	bl	8001bb6 <UART_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b090      	sub	sp, #64	; 0x40
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc6:	e050      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bce:	d04c      	beq.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bd6:	f7fe fedb 	bl	8000990 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d241      	bcs.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	330c      	adds	r3, #12
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	e853 3f00 	ldrex	r3, [r3]
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	330c      	adds	r3, #12
 8001c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c06:	637a      	str	r2, [r7, #52]	; 0x34
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c0e:	e841 2300 	strex	r3, r2, [r1]
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e5      	bne.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3314      	adds	r3, #20
 8001c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	e853 3f00 	ldrex	r3, [r3]
 8001c28:	613b      	str	r3, [r7, #16]
   return(result);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3314      	adds	r3, #20
 8001c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c3a:	623a      	str	r2, [r7, #32]
 8001c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3e:	69f9      	ldr	r1, [r7, #28]
 8001c40:	6a3a      	ldr	r2, [r7, #32]
 8001c42:	e841 2300 	strex	r3, r2, [r1]
 8001c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e5      	bne.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e00f      	b.n	8001c8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d09f      	beq.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3740      	adds	r7, #64	; 0x40
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	b09f      	sub	sp, #124	; 0x7c
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	ea40 0301 	orr.w	r3, r0, r1
 8001cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001cd8:	f021 010c 	bic.w	r1, r1, #12
 8001cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf2:	6999      	ldr	r1, [r3, #24]
 8001cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	ea40 0301 	orr.w	r3, r0, r1
 8001cfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4bc5      	ldr	r3, [pc, #788]	; (8002018 <UART_SetConfig+0x384>)
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d004      	beq.n	8001d12 <UART_SetConfig+0x7e>
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4bc3      	ldr	r3, [pc, #780]	; (800201c <UART_SetConfig+0x388>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d103      	bne.n	8001d1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d12:	f7ff fe5d 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8001d16:	6778      	str	r0, [r7, #116]	; 0x74
 8001d18:	e002      	b.n	8001d20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d1a:	f7ff fe45 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8001d1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d28:	f040 80b6 	bne.w	8001e98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2e:	461c      	mov	r4, r3
 8001d30:	f04f 0500 	mov.w	r5, #0
 8001d34:	4622      	mov	r2, r4
 8001d36:	462b      	mov	r3, r5
 8001d38:	1891      	adds	r1, r2, r2
 8001d3a:	6439      	str	r1, [r7, #64]	; 0x40
 8001d3c:	415b      	adcs	r3, r3
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d44:	1912      	adds	r2, r2, r4
 8001d46:	eb45 0303 	adc.w	r3, r5, r3
 8001d4a:	f04f 0000 	mov.w	r0, #0
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	00d9      	lsls	r1, r3, #3
 8001d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d58:	00d0      	lsls	r0, r2, #3
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	1911      	adds	r1, r2, r4
 8001d60:	6639      	str	r1, [r7, #96]	; 0x60
 8001d62:	416b      	adcs	r3, r5
 8001d64:	667b      	str	r3, [r7, #100]	; 0x64
 8001d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	1891      	adds	r1, r2, r2
 8001d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d74:	415b      	adcs	r3, r3
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d80:	f7fe fa86 	bl	8000290 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4ba5      	ldr	r3, [pc, #660]	; (8002020 <UART_SetConfig+0x38c>)
 8001d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	011e      	lsls	r6, r3, #4
 8001d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d94:	461c      	mov	r4, r3
 8001d96:	f04f 0500 	mov.w	r5, #0
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	1891      	adds	r1, r2, r2
 8001da0:	6339      	str	r1, [r7, #48]	; 0x30
 8001da2:	415b      	adcs	r3, r3
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001daa:	1912      	adds	r2, r2, r4
 8001dac:	eb45 0303 	adc.w	r3, r5, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	00d9      	lsls	r1, r3, #3
 8001dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dbe:	00d0      	lsls	r0, r2, #3
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	1911      	adds	r1, r2, r4
 8001dc6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dc8:	416b      	adcs	r3, r5
 8001dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	1891      	adds	r1, r2, r2
 8001dd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001de2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001de6:	f7fe fa53 	bl	8000290 <__aeabi_uldivmod>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4b8c      	ldr	r3, [pc, #560]	; (8002020 <UART_SetConfig+0x38c>)
 8001df0:	fba3 1302 	umull	r1, r3, r3, r2
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	2164      	movs	r1, #100	; 0x64
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	3332      	adds	r3, #50	; 0x32
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <UART_SetConfig+0x38c>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e10:	441e      	add	r6, r3
 8001e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e14:	4618      	mov	r0, r3
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	1894      	adds	r4, r2, r2
 8001e20:	623c      	str	r4, [r7, #32]
 8001e22:	415b      	adcs	r3, r3
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e2a:	1812      	adds	r2, r2, r0
 8001e2c:	eb41 0303 	adc.w	r3, r1, r3
 8001e30:	f04f 0400 	mov.w	r4, #0
 8001e34:	f04f 0500 	mov.w	r5, #0
 8001e38:	00dd      	lsls	r5, r3, #3
 8001e3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e3e:	00d4      	lsls	r4, r2, #3
 8001e40:	4622      	mov	r2, r4
 8001e42:	462b      	mov	r3, r5
 8001e44:	1814      	adds	r4, r2, r0
 8001e46:	653c      	str	r4, [r7, #80]	; 0x50
 8001e48:	414b      	adcs	r3, r1
 8001e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	461a      	mov	r2, r3
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	1891      	adds	r1, r2, r2
 8001e58:	61b9      	str	r1, [r7, #24]
 8001e5a:	415b      	adcs	r3, r3
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e66:	f7fe fa13 	bl	8000290 <__aeabi_uldivmod>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <UART_SetConfig+0x38c>)
 8001e70:	fba3 1302 	umull	r1, r3, r3, r2
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	3332      	adds	r3, #50	; 0x32
 8001e82:	4a67      	ldr	r2, [pc, #412]	; (8002020 <UART_SetConfig+0x38c>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	f003 0207 	and.w	r2, r3, #7
 8001e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4432      	add	r2, r6
 8001e94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e96:	e0b9      	b.n	800200c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	f04f 0500 	mov.w	r5, #0
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	1891      	adds	r1, r2, r2
 8001ea6:	6139      	str	r1, [r7, #16]
 8001ea8:	415b      	adcs	r3, r3
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb0:	1912      	adds	r2, r2, r4
 8001eb2:	eb45 0303 	adc.w	r3, r5, r3
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	00d9      	lsls	r1, r3, #3
 8001ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec4:	00d0      	lsls	r0, r2, #3
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	eb12 0804 	adds.w	r8, r2, r4
 8001ece:	eb43 0905 	adc.w	r9, r3, r5
 8001ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	008b      	lsls	r3, r1, #2
 8001ee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001eea:	0082      	lsls	r2, r0, #2
 8001eec:	4640      	mov	r0, r8
 8001eee:	4649      	mov	r1, r9
 8001ef0:	f7fe f9ce 	bl	8000290 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <UART_SetConfig+0x38c>)
 8001efa:	fba3 2302 	umull	r2, r3, r3, r2
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	011e      	lsls	r6, r3, #4
 8001f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f04:	4618      	mov	r0, r3
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	1894      	adds	r4, r2, r2
 8001f10:	60bc      	str	r4, [r7, #8]
 8001f12:	415b      	adcs	r3, r3
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1a:	1812      	adds	r2, r2, r0
 8001f1c:	eb41 0303 	adc.w	r3, r1, r3
 8001f20:	f04f 0400 	mov.w	r4, #0
 8001f24:	f04f 0500 	mov.w	r5, #0
 8001f28:	00dd      	lsls	r5, r3, #3
 8001f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f2e:	00d4      	lsls	r4, r2, #3
 8001f30:	4622      	mov	r2, r4
 8001f32:	462b      	mov	r3, r5
 8001f34:	1814      	adds	r4, r2, r0
 8001f36:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f38:	414b      	adcs	r3, r1
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	008b      	lsls	r3, r1, #2
 8001f50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f54:	0082      	lsls	r2, r0, #2
 8001f56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f5a:	f7fe f999 	bl	8000290 <__aeabi_uldivmod>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <UART_SetConfig+0x38c>)
 8001f64:	fba3 1302 	umull	r1, r3, r3, r2
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	3332      	adds	r3, #50	; 0x32
 8001f76:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <UART_SetConfig+0x38c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f82:	441e      	add	r6, r3
 8001f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f86:	4618      	mov	r0, r3
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	1894      	adds	r4, r2, r2
 8001f92:	603c      	str	r4, [r7, #0]
 8001f94:	415b      	adcs	r3, r3
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9c:	1812      	adds	r2, r2, r0
 8001f9e:	eb41 0303 	adc.w	r3, r1, r3
 8001fa2:	f04f 0400 	mov.w	r4, #0
 8001fa6:	f04f 0500 	mov.w	r5, #0
 8001faa:	00dd      	lsls	r5, r3, #3
 8001fac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fb0:	00d4      	lsls	r4, r2, #3
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	eb12 0a00 	adds.w	sl, r2, r0
 8001fba:	eb43 0b01 	adc.w	fp, r3, r1
 8001fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	008b      	lsls	r3, r1, #2
 8001fd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fd6:	0082      	lsls	r2, r0, #2
 8001fd8:	4650      	mov	r0, sl
 8001fda:	4659      	mov	r1, fp
 8001fdc:	f7fe f958 	bl	8000290 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <UART_SetConfig+0x38c>)
 8001fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2164      	movs	r1, #100	; 0x64
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	3332      	adds	r3, #50	; 0x32
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <UART_SetConfig+0x38c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4432      	add	r2, r6
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	377c      	adds	r7, #124	; 0x7c
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40011000 	.word	0x40011000
 800201c:	40011400 	.word	0x40011400
 8002020:	51eb851f 	.word	0x51eb851f

08002024 <debounceInit>:

void buttonReleased(void);
void  buttonPressed(void);
// Funci√≥n Inicializar MEF

bool_t debounceInit(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

	  /*Initialize Push Button */
	  BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8002028:	2100      	movs	r1, #0
 800202a:	2000      	movs	r0, #0
 800202c:	f7fe fb4a 	bl	80006c4 <BSP_PB_Init>
	  BSP_LED_Init(LED1);
 8002030:	2000      	movs	r0, #0
 8002032:	f7fe faa9 	bl	8000588 <BSP_LED_Init>
	  BSP_LED_Init(LED2);
 8002036:	2001      	movs	r0, #1
 8002038:	f7fe faa6 	bl	8000588 <BSP_LED_Init>
	  BSP_LED_Init(LED3);
 800203c:	2002      	movs	r0, #2
 800203e:	f7fe faa3 	bl	8000588 <BSP_LED_Init>
	  delayInit(&delay,DELAY_TIME );
 8002042:	2128      	movs	r1, #40	; 0x28
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <debounceInit+0x38>)
 8002046:	f000 f893 	bl	8002170 <delayInit>
	  debounceState = BUTTON_UP;
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <debounceInit+0x3c>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
	  secuencia=false;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <debounceInit+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
      return true;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200000a0 	.word	0x200000a0
 8002060:	2000011d 	.word	0x2000011d
 8002064:	2000011c 	.word	0x2000011c

08002068 <debounceUpdate>:

// Funci√≥n Actualizar MEF
void debounceUpdate(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    switch (debounceState) {
 800206c:	4b30      	ldr	r3, [pc, #192]	; (8002130 <debounceUpdate+0xc8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d851      	bhi.n	8002118 <debounceUpdate+0xb0>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <debounceUpdate+0x14>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	080020a7 	.word	0x080020a7
 8002084:	080020d3 	.word	0x080020d3
 8002088:	080020ed 	.word	0x080020ed
        case BUTTON_UP:
             if(BSP_PB_GetState(BUTTON_USER))
 800208c:	2000      	movs	r0, #0
 800208e:	f7fe fb6f 	bl	8000770 <BSP_PB_GetState>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d042      	beq.n	800211e <debounceUpdate+0xb6>
             { delayRead(&delay);
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <debounceUpdate+0xcc>)
 800209a:	f000 f87a 	bl	8002192 <delayRead>
               debounceState=BUTTON_FALLING;
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <debounceUpdate+0xc8>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
             }



        break;
 80020a4:	e03b      	b.n	800211e <debounceUpdate+0xb6>
        case BUTTON_FALLING:
        	 if(delayRead(&delay))
 80020a6:	4823      	ldr	r0, [pc, #140]	; (8002134 <debounceUpdate+0xcc>)
 80020a8:	f000 f873 	bl	8002192 <delayRead>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d037      	beq.n	8002122 <debounceUpdate+0xba>
        	  {if(BSP_PB_GetState(BUTTON_USER))
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7fe fb5c 	bl	8000770 <BSP_PB_GetState>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <debounceUpdate+0x62>
        	      {  buttonPressed();
 80020be:	f000 f843 	bl	8002148 <buttonPressed>
        	         debounceState=BUTTON_DOWN;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <debounceUpdate+0xc8>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
        		  }
        	   else{debounceState=BUTTON_UP;}
        	  }

        break;
 80020c8:	e02b      	b.n	8002122 <debounceUpdate+0xba>
        	   else{debounceState=BUTTON_UP;}
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <debounceUpdate+0xc8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
        break;
 80020d0:	e027      	b.n	8002122 <debounceUpdate+0xba>
        case BUTTON_DOWN:
        	 if(!BSP_PB_GetState(BUTTON_USER))
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7fe fb4c 	bl	8000770 <BSP_PB_GetState>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d123      	bne.n	8002126 <debounceUpdate+0xbe>
        	             { delayRead(&delay);
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <debounceUpdate+0xcc>)
 80020e0:	f000 f857 	bl	8002192 <delayRead>
        	               debounceState=BUTTON_RISING;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <debounceUpdate+0xc8>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	701a      	strb	r2, [r3, #0]
        	             }

             break;
 80020ea:	e01c      	b.n	8002126 <debounceUpdate+0xbe>
        case BUTTON_RISING:
        	 if(delayRead(&delay))
 80020ec:	4811      	ldr	r0, [pc, #68]	; (8002134 <debounceUpdate+0xcc>)
 80020ee:	f000 f850 	bl	8002192 <delayRead>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d018      	beq.n	800212a <debounceUpdate+0xc2>
        	        	  {if(!BSP_PB_GetState(BUTTON_USER))
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7fe fb39 	bl	8000770 <BSP_PB_GetState>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <debounceUpdate+0xa8>
        	        	      {  buttonReleased();
 8002104:	f000 f818 	bl	8002138 <buttonReleased>
        	        	         debounceState=BUTTON_UP;
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <debounceUpdate+0xc8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
        	        		  }
        	        	   else{debounceState=BUTTON_DOWN;}
        	        	  }

        	break;
 800210e:	e00c      	b.n	800212a <debounceUpdate+0xc2>
        	        	   else{debounceState=BUTTON_DOWN;}
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <debounceUpdate+0xc8>)
 8002112:	2202      	movs	r2, #2
 8002114:	701a      	strb	r2, [r3, #0]
        	break;
 8002116:	e008      	b.n	800212a <debounceUpdate+0xc2>
        default:
                    	debounceInit();
 8002118:	f7ff ff84 	bl	8002024 <debounceInit>
        break;
 800211c:	e006      	b.n	800212c <debounceUpdate+0xc4>
        break;
 800211e:	bf00      	nop
 8002120:	e004      	b.n	800212c <debounceUpdate+0xc4>
        break;
 8002122:	bf00      	nop
 8002124:	e002      	b.n	800212c <debounceUpdate+0xc4>
             break;
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <debounceUpdate+0xc4>
        	break;
 800212a:	bf00      	nop
        }
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000011d 	.word	0x2000011d
 8002134:	200000a0 	.word	0x200000a0

08002138 <buttonReleased>:

void buttonReleased(void)
{ //BSP_LED_Toggle(LED1);
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  //BSP_LED_Toggle(LED2);
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <buttonPressed>:
void  buttonPressed(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	 //BSP_LED_Toggle(LED1);
     //BSP_LED_Toggle(LED3);
	if(secuencia)
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <buttonPressed+0x24>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <buttonPressed+0x14>
		secuencia=false;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <buttonPressed+0x24>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
	else{secuencia=true;}
}
 800215a:	e002      	b.n	8002162 <buttonPressed+0x1a>
	else{secuencia=true;}
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <buttonPressed+0x24>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	2000011c 	.word	0x2000011c

08002170 <delayInit>:

#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
delay->duration= duration;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	605a      	str	r2, [r3, #4]
delay->running=0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	721a      	strb	r2, [r3, #8]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <delayRead>:


bool_t delayRead( delay_t *delay ){
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]

	bool_t tiempo_cumplido=false;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
    uint32_t dif_valor=0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  if(!delay->running)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7a1b      	ldrb	r3, [r3, #8]
 80021a6:	f083 0301 	eor.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <delayRead+0x30>
     {delay->startTime = HAL_GetTick();
 80021b0:	f7fe fbee 	bl	8000990 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
      delay->running=true;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	721a      	strb	r2, [r3, #8]
 80021c0:	e013      	b.n	80021ea <delayRead+0x58>
     }
  else{
	   dif_valor=HAL_GetTick()-delay->startTime;
 80021c2:	f7fe fbe5 	bl	8000990 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	60bb      	str	r3, [r7, #8]
	   if(dif_valor>=delay->duration)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d305      	bcc.n	80021e6 <delayRead+0x54>
	      {tiempo_cumplido=true;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
	       delay->running=false;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	721a      	strb	r2, [r3, #8]
 80021e4:	e001      	b.n	80021ea <delayRead+0x58>
		  }
	   else{tiempo_cumplido=false;}
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
       }
 return tiempo_cumplido;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	605a      	str	r2, [r3, #4]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <uartInit>:
#include "stdbool.h"

UART_HandleTypeDef UartHandle;

bool_t uartInit()
{ char buffer[100];
 8002210:	b580      	push	{r7, lr}
 8002212:	b09a      	sub	sp, #104	; 0x68
 8002214:	af00      	add	r7, sp, #0
  // inicializaci√≥n buffer de caracteres//
  uint8_t i;
  for(i=0;i<sizeof(buffer);i++)
 8002216:	2300      	movs	r3, #0
 8002218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800221c:	e00c      	b.n	8002238 <uartInit+0x28>
  	  	  {buffer[i]=NULL;}
 800221e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002222:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002226:	4413      	add	r3, r2
 8002228:	2200      	movs	r2, #0
 800222a:	f803 2c68 	strb.w	r2, [r3, #-104]
  for(i=0;i<sizeof(buffer);i++)
 800222e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002232:	3301      	adds	r3, #1
 8002234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800223c:	2b63      	cmp	r3, #99	; 0x63
 800223e:	d9ee      	bls.n	800221e <uartInit+0xe>
  // FIN inicializaci√≥n buffer de caracteres//

  UartHandle.Instance        = USARTx;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <uartInit+0x9c>)
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <uartInit+0xa0>)
 8002244:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <uartInit+0x9c>)
 8002248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800224c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <uartInit+0x9c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <uartInit+0x9c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <uartInit+0x9c>)
 800225c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002260:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <uartInit+0x9c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <uartInit+0x9c>)
 800226a:	220c      	movs	r2, #12
 800226c:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <uartInit+0x9c>)
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <uartInit+0x9c>)
 8002276:	f7ff fbbf 	bl	80019f8 <HAL_UART_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <uartInit+0x74>
  {
    /* Initialization Error */
	  return false;
 8002280:	2300      	movs	r3, #0
 8002282:	e00e      	b.n	80022a2 <uartInit+0x92>
  }
  else{ sprintf(buffer,"\n\rvelocidad de transmision %ld,8 bits de palabras, %ld bits de stop\n\r",UartHandle.Init.BaudRate,UART_STOPBITS_1);
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <uartInit+0x9c>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4638      	mov	r0, r7
 800228a:	2300      	movs	r3, #0
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <uartInit+0xa4>)
 800228e:	f000 fa01 	bl	8002694 <siprintf>
        HAL_UART_Transmit(&UartHandle,buffer,sizeof(buffer)/sizeof(char),0xFFFF);
 8002292:	4639      	mov	r1, r7
 8002294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <uartInit+0x9c>)
 800229c:	f7ff fbf9 	bl	8001a92 <HAL_UART_Transmit>
	    return true;
 80022a0:	2301      	movs	r3, #1
      }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3768      	adds	r7, #104	; 0x68
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000120 	.word	0x20000120
 80022b0:	40004800 	.word	0x40004800
 80022b4:	08002f08 	.word	0x08002f08

080022b8 <uartSendString>:

void uartSendString(uint8_t *pstring,uint16_t size)
{  uint8_t index, count=0;
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	2300      	movs	r3, #0
 80022c6:	73bb      	strb	r3, [r7, #14]
for(index=0;*(pstring + index)!=0; index ++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e005      	b.n	80022da <uartSendString+0x22>
{count++;}
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	3301      	adds	r3, #1
 80022d2:	73bb      	strb	r3, [r7, #14]
for(index=0;*(pstring + index)!=0; index ++)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	3301      	adds	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f3      	bne.n	80022ce <uartSendString+0x16>

	HAL_UART_Transmit(&UartHandle,pstring,size,0xFFFF);
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4803      	ldr	r0, [pc, #12]	; (80022fc <uartSendString+0x44>)
 80022f0:	f7ff fbcf 	bl	8001a92 <HAL_UART_Transmit>

}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000120 	.word	0x20000120

08002300 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b090      	sub	sp, #64	; 0x40
 8002304:	af02      	add	r7, sp, #8
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002306:	f7fe fae3 	bl	80008d0 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 800230a:	f000 f901 	bl	8002510 <SystemClock_Config>

 if(uartInit()==true)
 800230e:	f7ff ff7f 	bl	8002210 <uartInit>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <main+0x22>
    {uartSendString(UARTOK,sizeof(UARTOK)/sizeof(char));}
 8002318:	2124      	movs	r1, #36	; 0x24
 800231a:	4878      	ldr	r0, [pc, #480]	; (80024fc <main+0x1fc>)
 800231c:	f7ff ffcc 	bl	80022b8 <uartSendString>
 8002320:	e005      	b.n	800232e <main+0x2e>

 else{uartSendString(UARTNOK,sizeof(UARTOK)/sizeof(char));
 8002322:	2124      	movs	r1, #36	; 0x24
 8002324:	4876      	ldr	r0, [pc, #472]	; (8002500 <main+0x200>)
 8002326:	f7ff ffc7 	bl	80022b8 <uartSendString>
	  Error_Uart_Config();
 800232a:	f000 f959 	bl	80025e0 <Error_Uart_Config>
      }

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED1);
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe f92a 	bl	8000588 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002334:	2001      	movs	r0, #1
 8002336:	f7fe f927 	bl	8000588 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800233a:	2002      	movs	r0, #2
 800233c:	f7fe f924 	bl	8000588 <BSP_LED_Init>

  /*Initialize Push Button */
  BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8002340:	2100      	movs	r1, #0
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe f9be 	bl	80006c4 <BSP_PB_Init>
      - Parity      = ODD parity
      - BaudRate    = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */

  delay_t delay_LED1,delay_LED2,delay_LED3;
  tick_t retardo_1=100;
 8002348:	2364      	movs	r3, #100	; 0x64
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
  tick_t retardo_2=500;
 800234c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  tick_t retardo_3=1000;
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28

  bool_tr bool_trans =false;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  debounceInit();
 800235e:	f7ff fe61 	bl	8002024 <debounceInit>

  delayInit(&delay_LED1, retardo_1 );
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff01 	bl	8002170 <delayInit>
  delayInit(&delay_LED2, retardo_2 );
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fefb 	bl	8002170 <delayInit>
  delayInit(&delay_LED3, retardo_3 );
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fef6 	bl	8002170 <delayInit>

  static char estadoLeds[100];
  uint8_t i;
  for(i=0;i<sizeof(estadoLeds);i++)
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800238a:	e009      	b.n	80023a0 <main+0xa0>
      {estadoLeds[i]=NULL;}
 800238c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002390:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <main+0x204>)
 8002392:	2100      	movs	r1, #0
 8002394:	54d1      	strb	r1, [r2, r3]
  for(i=0;i<sizeof(estadoLeds);i++)
 8002396:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800239a:	3301      	adds	r3, #1
 800239c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023a4:	2b63      	cmp	r3, #99	; 0x63
 80023a6:	d9f1      	bls.n	800238c <main+0x8c>

  /* Infinite loop */
  while (1)
  {
	  debounceUpdate();
 80023a8:	f7ff fe5e 	bl	8002068 <debounceUpdate>

	       if(!secuencia)
 80023ac:	4b56      	ldr	r3, [pc, #344]	; (8002508 <main+0x208>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d050      	beq.n	800245c <main+0x15c>
	       { if(!bool_trans)
 80023ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d028      	beq.n	800241a <main+0x11a>
	           {
	    	    delayWrite(&delay_LED1,retardo_1);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff10 	bl	80021f4 <delayWrite>
	            delayWrite(&delay_LED2,retardo_2);
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff0a 	bl	80021f4 <delayWrite>
	            delayWrite(&delay_LED3,retardo_3);
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff05 	bl	80021f4 <delayWrite>
	            sprintf(estadoLeds,"\n\rLED1= %ld ms.\n\rLED2= %ld ms.\n\rLED3= %ld ms.",retardo_1,retardo_2,retardo_3);
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f2:	4946      	ldr	r1, [pc, #280]	; (800250c <main+0x20c>)
 80023f4:	4843      	ldr	r0, [pc, #268]	; (8002504 <main+0x204>)
 80023f6:	f000 f94d 	bl	8002694 <siprintf>
	            uartSendString(estadoLeds,sizeof(estadoLeds)/sizeof(char));
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	4841      	ldr	r0, [pc, #260]	; (8002504 <main+0x204>)
 80023fe:	f7ff ff5b 	bl	80022b8 <uartSendString>
	            bool_trans=true;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	            BSP_LED_Off(LED1);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe f927 	bl	800065c <BSP_LED_Off>
	            BSP_LED_Off(LED2);
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe f924 	bl	800065c <BSP_LED_Off>
	            BSP_LED_Off(LED3);
 8002414:	2002      	movs	r0, #2
 8002416:	f7fe f921 	bl	800065c <BSP_LED_Off>
	            }

	 	   if(delayRead(&delay_LED1))
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff feb7 	bl	8002192 <delayRead>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <main+0x130>
	 		   	BSP_LED_Toggle(LED1);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe f930 	bl	8000690 <BSP_LED_Toggle>
	        if(delayRead(&delay_LED2))
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff feac 	bl	8002192 <delayRead>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <main+0x146>
	 	 	    BSP_LED_Toggle(LED2);
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe f925 	bl	8000690 <BSP_LED_Toggle>
	 	   if(delayRead(&delay_LED3))
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fea2 	bl	8002192 <delayRead>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0a9      	beq.n	80023a8 <main+0xa8>
	 	 	    BSP_LED_Toggle(LED3);
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe f91b 	bl	8000690 <BSP_LED_Toggle>
 800245a:	e7a5      	b.n	80023a8 <main+0xa8>


	       }
	 	  else
	 	   {
	 		  if(bool_trans)
 800245c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002460:	2b00      	cmp	r3, #0
 8002462:	d028      	beq.n	80024b6 <main+0x1b6>
	          {
	 		   delayWrite(&delay_LED1,retardo_2);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fec2 	bl	80021f4 <delayWrite>
	           delayWrite(&delay_LED2,retardo_2);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff febc 	bl	80021f4 <delayWrite>
	           delayWrite(&delay_LED3,retardo_2);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff feb7 	bl	80021f4 <delayWrite>
	           sprintf(estadoLeds,"\n\rLED1= %ld ms.\n\rLED2= %ld ms.\n\rLED3= %ld ms.",retardo_2,retardo_2,retardo_2);
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <main+0x20c>)
 8002490:	481c      	ldr	r0, [pc, #112]	; (8002504 <main+0x204>)
 8002492:	f000 f8ff 	bl	8002694 <siprintf>
	           uartSendString(estadoLeds,sizeof(estadoLeds)/sizeof(char));
 8002496:	2164      	movs	r1, #100	; 0x64
 8002498:	481a      	ldr	r0, [pc, #104]	; (8002504 <main+0x204>)
 800249a:	f7ff ff0d 	bl	80022b8 <uartSendString>
	           bool_trans=false;
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	           BSP_LED_Off(LED1);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe f8d9 	bl	800065c <BSP_LED_Off>
	           BSP_LED_Off(LED2);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe f8d6 	bl	800065c <BSP_LED_Off>
	           BSP_LED_Off(LED3);
 80024b0:	2002      	movs	r0, #2
 80024b2:	f7fe f8d3 	bl	800065c <BSP_LED_Off>
	          }

	 		if(delayRead(&delay_LED1))
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe69 	bl	8002192 <delayRead>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <main+0x1cc>
	 		   	BSP_LED_Toggle(LED1);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe f8e2 	bl	8000690 <BSP_LED_Toggle>
	         if(delayRead(&delay_LED2))
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe5e 	bl	8002192 <delayRead>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <main+0x1e2>
	 	 	    BSP_LED_Toggle(LED2);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe f8d7 	bl	8000690 <BSP_LED_Toggle>
	 	    if(delayRead(&delay_LED3))
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fe54 	bl	8002192 <delayRead>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f43f af5b 	beq.w	80023a8 <main+0xa8>
	 	 	    BSP_LED_Toggle(LED3);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7fe f8cc 	bl	8000690 <BSP_LED_Toggle>
	  debounceUpdate();
 80024f8:	e756      	b.n	80023a8 <main+0xa8>
 80024fa:	bf00      	nop
 80024fc:	08002f50 	.word	0x08002f50
 8002500:	08002f74 	.word	0x08002f74
 8002504:	200000ac 	.word	0x200000ac
 8002508:	2000011c 	.word	0x2000011c
 800250c:	08002fa0 	.word	0x08002fa0

08002510 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b094      	sub	sp, #80	; 0x50
 8002514:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <SystemClock_Config+0xbc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <SystemClock_Config+0xbc>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <SystemClock_Config+0xbc>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <SystemClock_Config+0xc0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <SystemClock_Config+0xc0>)
 800253c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <SystemClock_Config+0xc0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800254e:	2301      	movs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002552:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002556:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002558:	2302      	movs	r3, #2
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800255c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002562:	2308      	movs	r3, #8
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002566:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800256c:	2302      	movs	r3, #2
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002570:	2307      	movs	r3, #7
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fdc9 	bl	8001110 <HAL_RCC_OscConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002584:	f000 f826 	bl	80025d4 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002588:	f7fe fd72 	bl	8001070 <HAL_PWREx_EnableOverDrive>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002592:	f000 f81f 	bl	80025d4 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002596:	230f      	movs	r3, #15
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259a:	2302      	movs	r3, #2
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80025a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025b2:	2105      	movs	r1, #5
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f823 	bl	8001600 <HAL_RCC_ClockConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80025c0:	f000 f808 	bl	80025d4 <Error_Handler>
  }
}
 80025c4:	bf00      	nop
 80025c6:	3750      	adds	r7, #80	; 0x50
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40007000 	.word	0x40007000

080025d4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80025d8:	2001      	movs	r0, #1
 80025da:	f7fe f825 	bl	8000628 <BSP_LED_On>
  while (1)
 80025de:	e7fe      	b.n	80025de <Error_Handler+0xa>

080025e0 <Error_Uart_Config>:
  {
  }
}

static void Error_Uart_Config(void)
{ BSP_LED_On(LED2);
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7fe f81f 	bl	8000628 <BSP_LED_On>
	while (1);
 80025ea:	e7fe      	b.n	80025ea <Error_Uart_Config+0xa>

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025f2:	e003      	b.n	80025fc <LoopCopyDataInit>

080025f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025fa:	3104      	adds	r1, #4

080025fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025fc:	480b      	ldr	r0, [pc, #44]	; (800262c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002604:	d3f6      	bcc.n	80025f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002608:	e002      	b.n	8002610 <LoopFillZerobss>

0800260a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800260a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800260c:	f842 3b04 	str.w	r3, [r2], #4

08002610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002614:	d3f9      	bcc.n	800260a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002616:	f7fe f8c1 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f000 f817 	bl	800264c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7ff fe6f 	bl	8002300 <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002624:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002628:	08003034 	.word	0x08003034
  ldr  r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002630:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002634:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002638:	20000174 	.word	0x20000174

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <__errno>:
 8002640:	4b01      	ldr	r3, [pc, #4]	; (8002648 <__errno+0x8>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	2000001c 	.word	0x2000001c

0800264c <__libc_init_array>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4d0d      	ldr	r5, [pc, #52]	; (8002684 <__libc_init_array+0x38>)
 8002650:	4c0d      	ldr	r4, [pc, #52]	; (8002688 <__libc_init_array+0x3c>)
 8002652:	1b64      	subs	r4, r4, r5
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	2600      	movs	r6, #0
 8002658:	42a6      	cmp	r6, r4
 800265a:	d109      	bne.n	8002670 <__libc_init_array+0x24>
 800265c:	4d0b      	ldr	r5, [pc, #44]	; (800268c <__libc_init_array+0x40>)
 800265e:	4c0c      	ldr	r4, [pc, #48]	; (8002690 <__libc_init_array+0x44>)
 8002660:	f000 fc46 	bl	8002ef0 <_init>
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	2600      	movs	r6, #0
 800266a:	42a6      	cmp	r6, r4
 800266c:	d105      	bne.n	800267a <__libc_init_array+0x2e>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	f855 3b04 	ldr.w	r3, [r5], #4
 8002674:	4798      	blx	r3
 8002676:	3601      	adds	r6, #1
 8002678:	e7ee      	b.n	8002658 <__libc_init_array+0xc>
 800267a:	f855 3b04 	ldr.w	r3, [r5], #4
 800267e:	4798      	blx	r3
 8002680:	3601      	adds	r6, #1
 8002682:	e7f2      	b.n	800266a <__libc_init_array+0x1e>
 8002684:	0800302c 	.word	0x0800302c
 8002688:	0800302c 	.word	0x0800302c
 800268c:	0800302c 	.word	0x0800302c
 8002690:	08003030 	.word	0x08003030

08002694 <siprintf>:
 8002694:	b40e      	push	{r1, r2, r3}
 8002696:	b500      	push	{lr}
 8002698:	b09c      	sub	sp, #112	; 0x70
 800269a:	ab1d      	add	r3, sp, #116	; 0x74
 800269c:	9002      	str	r0, [sp, #8]
 800269e:	9006      	str	r0, [sp, #24]
 80026a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <siprintf+0x38>)
 80026a6:	9107      	str	r1, [sp, #28]
 80026a8:	9104      	str	r1, [sp, #16]
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <siprintf+0x3c>)
 80026ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b0:	9105      	str	r1, [sp, #20]
 80026b2:	6800      	ldr	r0, [r0, #0]
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	a902      	add	r1, sp, #8
 80026b8:	f000 f868 	bl	800278c <_svfiprintf_r>
 80026bc:	9b02      	ldr	r3, [sp, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	b01c      	add	sp, #112	; 0x70
 80026c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026c8:	b003      	add	sp, #12
 80026ca:	4770      	bx	lr
 80026cc:	2000001c 	.word	0x2000001c
 80026d0:	ffff0208 	.word	0xffff0208

080026d4 <__ssputs_r>:
 80026d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	688e      	ldr	r6, [r1, #8]
 80026da:	429e      	cmp	r6, r3
 80026dc:	4682      	mov	sl, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	4690      	mov	r8, r2
 80026e2:	461f      	mov	r7, r3
 80026e4:	d838      	bhi.n	8002758 <__ssputs_r+0x84>
 80026e6:	898a      	ldrh	r2, [r1, #12]
 80026e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026ec:	d032      	beq.n	8002754 <__ssputs_r+0x80>
 80026ee:	6825      	ldr	r5, [r4, #0]
 80026f0:	6909      	ldr	r1, [r1, #16]
 80026f2:	eba5 0901 	sub.w	r9, r5, r1
 80026f6:	6965      	ldr	r5, [r4, #20]
 80026f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002700:	3301      	adds	r3, #1
 8002702:	444b      	add	r3, r9
 8002704:	106d      	asrs	r5, r5, #1
 8002706:	429d      	cmp	r5, r3
 8002708:	bf38      	it	cc
 800270a:	461d      	movcc	r5, r3
 800270c:	0553      	lsls	r3, r2, #21
 800270e:	d531      	bpl.n	8002774 <__ssputs_r+0xa0>
 8002710:	4629      	mov	r1, r5
 8002712:	f000 fb47 	bl	8002da4 <_malloc_r>
 8002716:	4606      	mov	r6, r0
 8002718:	b950      	cbnz	r0, 8002730 <__ssputs_r+0x5c>
 800271a:	230c      	movs	r3, #12
 800271c:	f8ca 3000 	str.w	r3, [sl]
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002726:	81a3      	strh	r3, [r4, #12]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	6921      	ldr	r1, [r4, #16]
 8002732:	464a      	mov	r2, r9
 8002734:	f000 fabe 	bl	8002cb4 <memcpy>
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002742:	81a3      	strh	r3, [r4, #12]
 8002744:	6126      	str	r6, [r4, #16]
 8002746:	6165      	str	r5, [r4, #20]
 8002748:	444e      	add	r6, r9
 800274a:	eba5 0509 	sub.w	r5, r5, r9
 800274e:	6026      	str	r6, [r4, #0]
 8002750:	60a5      	str	r5, [r4, #8]
 8002752:	463e      	mov	r6, r7
 8002754:	42be      	cmp	r6, r7
 8002756:	d900      	bls.n	800275a <__ssputs_r+0x86>
 8002758:	463e      	mov	r6, r7
 800275a:	4632      	mov	r2, r6
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	4641      	mov	r1, r8
 8002760:	f000 fab6 	bl	8002cd0 <memmove>
 8002764:	68a3      	ldr	r3, [r4, #8]
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	1b9b      	subs	r3, r3, r6
 800276a:	4432      	add	r2, r6
 800276c:	60a3      	str	r3, [r4, #8]
 800276e:	6022      	str	r2, [r4, #0]
 8002770:	2000      	movs	r0, #0
 8002772:	e7db      	b.n	800272c <__ssputs_r+0x58>
 8002774:	462a      	mov	r2, r5
 8002776:	f000 fb6f 	bl	8002e58 <_realloc_r>
 800277a:	4606      	mov	r6, r0
 800277c:	2800      	cmp	r0, #0
 800277e:	d1e1      	bne.n	8002744 <__ssputs_r+0x70>
 8002780:	6921      	ldr	r1, [r4, #16]
 8002782:	4650      	mov	r0, sl
 8002784:	f000 fabe 	bl	8002d04 <_free_r>
 8002788:	e7c7      	b.n	800271a <__ssputs_r+0x46>
	...

0800278c <_svfiprintf_r>:
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4698      	mov	r8, r3
 8002792:	898b      	ldrh	r3, [r1, #12]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	b09d      	sub	sp, #116	; 0x74
 8002798:	4607      	mov	r7, r0
 800279a:	460d      	mov	r5, r1
 800279c:	4614      	mov	r4, r2
 800279e:	d50e      	bpl.n	80027be <_svfiprintf_r+0x32>
 80027a0:	690b      	ldr	r3, [r1, #16]
 80027a2:	b963      	cbnz	r3, 80027be <_svfiprintf_r+0x32>
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	f000 fafd 	bl	8002da4 <_malloc_r>
 80027aa:	6028      	str	r0, [r5, #0]
 80027ac:	6128      	str	r0, [r5, #16]
 80027ae:	b920      	cbnz	r0, 80027ba <_svfiprintf_r+0x2e>
 80027b0:	230c      	movs	r3, #12
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b8:	e0d1      	b.n	800295e <_svfiprintf_r+0x1d2>
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	616b      	str	r3, [r5, #20]
 80027be:	2300      	movs	r3, #0
 80027c0:	9309      	str	r3, [sp, #36]	; 0x24
 80027c2:	2320      	movs	r3, #32
 80027c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80027cc:	2330      	movs	r3, #48	; 0x30
 80027ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002978 <_svfiprintf_r+0x1ec>
 80027d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027d6:	f04f 0901 	mov.w	r9, #1
 80027da:	4623      	mov	r3, r4
 80027dc:	469a      	mov	sl, r3
 80027de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e2:	b10a      	cbz	r2, 80027e8 <_svfiprintf_r+0x5c>
 80027e4:	2a25      	cmp	r2, #37	; 0x25
 80027e6:	d1f9      	bne.n	80027dc <_svfiprintf_r+0x50>
 80027e8:	ebba 0b04 	subs.w	fp, sl, r4
 80027ec:	d00b      	beq.n	8002806 <_svfiprintf_r+0x7a>
 80027ee:	465b      	mov	r3, fp
 80027f0:	4622      	mov	r2, r4
 80027f2:	4629      	mov	r1, r5
 80027f4:	4638      	mov	r0, r7
 80027f6:	f7ff ff6d 	bl	80026d4 <__ssputs_r>
 80027fa:	3001      	adds	r0, #1
 80027fc:	f000 80aa 	beq.w	8002954 <_svfiprintf_r+0x1c8>
 8002800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002802:	445a      	add	r2, fp
 8002804:	9209      	str	r2, [sp, #36]	; 0x24
 8002806:	f89a 3000 	ldrb.w	r3, [sl]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80a2 	beq.w	8002954 <_svfiprintf_r+0x1c8>
 8002810:	2300      	movs	r3, #0
 8002812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800281a:	f10a 0a01 	add.w	sl, sl, #1
 800281e:	9304      	str	r3, [sp, #16]
 8002820:	9307      	str	r3, [sp, #28]
 8002822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002826:	931a      	str	r3, [sp, #104]	; 0x68
 8002828:	4654      	mov	r4, sl
 800282a:	2205      	movs	r2, #5
 800282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002830:	4851      	ldr	r0, [pc, #324]	; (8002978 <_svfiprintf_r+0x1ec>)
 8002832:	f7fd fcdd 	bl	80001f0 <memchr>
 8002836:	9a04      	ldr	r2, [sp, #16]
 8002838:	b9d8      	cbnz	r0, 8002872 <_svfiprintf_r+0xe6>
 800283a:	06d0      	lsls	r0, r2, #27
 800283c:	bf44      	itt	mi
 800283e:	2320      	movmi	r3, #32
 8002840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002844:	0711      	lsls	r1, r2, #28
 8002846:	bf44      	itt	mi
 8002848:	232b      	movmi	r3, #43	; 0x2b
 800284a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800284e:	f89a 3000 	ldrb.w	r3, [sl]
 8002852:	2b2a      	cmp	r3, #42	; 0x2a
 8002854:	d015      	beq.n	8002882 <_svfiprintf_r+0xf6>
 8002856:	9a07      	ldr	r2, [sp, #28]
 8002858:	4654      	mov	r4, sl
 800285a:	2000      	movs	r0, #0
 800285c:	f04f 0c0a 	mov.w	ip, #10
 8002860:	4621      	mov	r1, r4
 8002862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002866:	3b30      	subs	r3, #48	; 0x30
 8002868:	2b09      	cmp	r3, #9
 800286a:	d94e      	bls.n	800290a <_svfiprintf_r+0x17e>
 800286c:	b1b0      	cbz	r0, 800289c <_svfiprintf_r+0x110>
 800286e:	9207      	str	r2, [sp, #28]
 8002870:	e014      	b.n	800289c <_svfiprintf_r+0x110>
 8002872:	eba0 0308 	sub.w	r3, r0, r8
 8002876:	fa09 f303 	lsl.w	r3, r9, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	46a2      	mov	sl, r4
 8002880:	e7d2      	b.n	8002828 <_svfiprintf_r+0x9c>
 8002882:	9b03      	ldr	r3, [sp, #12]
 8002884:	1d19      	adds	r1, r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	9103      	str	r1, [sp, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfbb      	ittet	lt
 800288e:	425b      	neglt	r3, r3
 8002890:	f042 0202 	orrlt.w	r2, r2, #2
 8002894:	9307      	strge	r3, [sp, #28]
 8002896:	9307      	strlt	r3, [sp, #28]
 8002898:	bfb8      	it	lt
 800289a:	9204      	strlt	r2, [sp, #16]
 800289c:	7823      	ldrb	r3, [r4, #0]
 800289e:	2b2e      	cmp	r3, #46	; 0x2e
 80028a0:	d10c      	bne.n	80028bc <_svfiprintf_r+0x130>
 80028a2:	7863      	ldrb	r3, [r4, #1]
 80028a4:	2b2a      	cmp	r3, #42	; 0x2a
 80028a6:	d135      	bne.n	8002914 <_svfiprintf_r+0x188>
 80028a8:	9b03      	ldr	r3, [sp, #12]
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	9203      	str	r2, [sp, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bfb8      	it	lt
 80028b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028b8:	3402      	adds	r4, #2
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002988 <_svfiprintf_r+0x1fc>
 80028c0:	7821      	ldrb	r1, [r4, #0]
 80028c2:	2203      	movs	r2, #3
 80028c4:	4650      	mov	r0, sl
 80028c6:	f7fd fc93 	bl	80001f0 <memchr>
 80028ca:	b140      	cbz	r0, 80028de <_svfiprintf_r+0x152>
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	eba0 000a 	sub.w	r0, r0, sl
 80028d2:	fa03 f000 	lsl.w	r0, r3, r0
 80028d6:	9b04      	ldr	r3, [sp, #16]
 80028d8:	4303      	orrs	r3, r0
 80028da:	3401      	adds	r4, #1
 80028dc:	9304      	str	r3, [sp, #16]
 80028de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e2:	4826      	ldr	r0, [pc, #152]	; (800297c <_svfiprintf_r+0x1f0>)
 80028e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028e8:	2206      	movs	r2, #6
 80028ea:	f7fd fc81 	bl	80001f0 <memchr>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d038      	beq.n	8002964 <_svfiprintf_r+0x1d8>
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <_svfiprintf_r+0x1f4>)
 80028f4:	bb1b      	cbnz	r3, 800293e <_svfiprintf_r+0x1b2>
 80028f6:	9b03      	ldr	r3, [sp, #12]
 80028f8:	3307      	adds	r3, #7
 80028fa:	f023 0307 	bic.w	r3, r3, #7
 80028fe:	3308      	adds	r3, #8
 8002900:	9303      	str	r3, [sp, #12]
 8002902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002904:	4433      	add	r3, r6
 8002906:	9309      	str	r3, [sp, #36]	; 0x24
 8002908:	e767      	b.n	80027da <_svfiprintf_r+0x4e>
 800290a:	fb0c 3202 	mla	r2, ip, r2, r3
 800290e:	460c      	mov	r4, r1
 8002910:	2001      	movs	r0, #1
 8002912:	e7a5      	b.n	8002860 <_svfiprintf_r+0xd4>
 8002914:	2300      	movs	r3, #0
 8002916:	3401      	adds	r4, #1
 8002918:	9305      	str	r3, [sp, #20]
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 0c0a 	mov.w	ip, #10
 8002920:	4620      	mov	r0, r4
 8002922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002926:	3a30      	subs	r2, #48	; 0x30
 8002928:	2a09      	cmp	r2, #9
 800292a:	d903      	bls.n	8002934 <_svfiprintf_r+0x1a8>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0c5      	beq.n	80028bc <_svfiprintf_r+0x130>
 8002930:	9105      	str	r1, [sp, #20]
 8002932:	e7c3      	b.n	80028bc <_svfiprintf_r+0x130>
 8002934:	fb0c 2101 	mla	r1, ip, r1, r2
 8002938:	4604      	mov	r4, r0
 800293a:	2301      	movs	r3, #1
 800293c:	e7f0      	b.n	8002920 <_svfiprintf_r+0x194>
 800293e:	ab03      	add	r3, sp, #12
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	462a      	mov	r2, r5
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <_svfiprintf_r+0x1f8>)
 8002946:	a904      	add	r1, sp, #16
 8002948:	4638      	mov	r0, r7
 800294a:	f3af 8000 	nop.w
 800294e:	1c42      	adds	r2, r0, #1
 8002950:	4606      	mov	r6, r0
 8002952:	d1d6      	bne.n	8002902 <_svfiprintf_r+0x176>
 8002954:	89ab      	ldrh	r3, [r5, #12]
 8002956:	065b      	lsls	r3, r3, #25
 8002958:	f53f af2c 	bmi.w	80027b4 <_svfiprintf_r+0x28>
 800295c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800295e:	b01d      	add	sp, #116	; 0x74
 8002960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002964:	ab03      	add	r3, sp, #12
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	462a      	mov	r2, r5
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <_svfiprintf_r+0x1f8>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	4638      	mov	r0, r7
 8002970:	f000 f87a 	bl	8002a68 <_printf_i>
 8002974:	e7eb      	b.n	800294e <_svfiprintf_r+0x1c2>
 8002976:	bf00      	nop
 8002978:	08002ff0 	.word	0x08002ff0
 800297c:	08002ffa 	.word	0x08002ffa
 8002980:	00000000 	.word	0x00000000
 8002984:	080026d5 	.word	0x080026d5
 8002988:	08002ff6 	.word	0x08002ff6

0800298c <_printf_common>:
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	4616      	mov	r6, r2
 8002992:	4699      	mov	r9, r3
 8002994:	688a      	ldr	r2, [r1, #8]
 8002996:	690b      	ldr	r3, [r1, #16]
 8002998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800299c:	4293      	cmp	r3, r2
 800299e:	bfb8      	it	lt
 80029a0:	4613      	movlt	r3, r2
 80029a2:	6033      	str	r3, [r6, #0]
 80029a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029a8:	4607      	mov	r7, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	b10a      	cbz	r2, 80029b2 <_printf_common+0x26>
 80029ae:	3301      	adds	r3, #1
 80029b0:	6033      	str	r3, [r6, #0]
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	0699      	lsls	r1, r3, #26
 80029b6:	bf42      	ittt	mi
 80029b8:	6833      	ldrmi	r3, [r6, #0]
 80029ba:	3302      	addmi	r3, #2
 80029bc:	6033      	strmi	r3, [r6, #0]
 80029be:	6825      	ldr	r5, [r4, #0]
 80029c0:	f015 0506 	ands.w	r5, r5, #6
 80029c4:	d106      	bne.n	80029d4 <_printf_common+0x48>
 80029c6:	f104 0a19 	add.w	sl, r4, #25
 80029ca:	68e3      	ldr	r3, [r4, #12]
 80029cc:	6832      	ldr	r2, [r6, #0]
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	42ab      	cmp	r3, r5
 80029d2:	dc26      	bgt.n	8002a22 <_printf_common+0x96>
 80029d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029d8:	1e13      	subs	r3, r2, #0
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	bf18      	it	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	0692      	lsls	r2, r2, #26
 80029e2:	d42b      	bmi.n	8002a3c <_printf_common+0xb0>
 80029e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029e8:	4649      	mov	r1, r9
 80029ea:	4638      	mov	r0, r7
 80029ec:	47c0      	blx	r8
 80029ee:	3001      	adds	r0, #1
 80029f0:	d01e      	beq.n	8002a30 <_printf_common+0xa4>
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	68e5      	ldr	r5, [r4, #12]
 80029f6:	6832      	ldr	r2, [r6, #0]
 80029f8:	f003 0306 	and.w	r3, r3, #6
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	bf08      	it	eq
 8002a00:	1aad      	subeq	r5, r5, r2
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	6922      	ldr	r2, [r4, #16]
 8002a06:	bf0c      	ite	eq
 8002a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a0c:	2500      	movne	r5, #0
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	bfc4      	itt	gt
 8002a12:	1a9b      	subgt	r3, r3, r2
 8002a14:	18ed      	addgt	r5, r5, r3
 8002a16:	2600      	movs	r6, #0
 8002a18:	341a      	adds	r4, #26
 8002a1a:	42b5      	cmp	r5, r6
 8002a1c:	d11a      	bne.n	8002a54 <_printf_common+0xc8>
 8002a1e:	2000      	movs	r0, #0
 8002a20:	e008      	b.n	8002a34 <_printf_common+0xa8>
 8002a22:	2301      	movs	r3, #1
 8002a24:	4652      	mov	r2, sl
 8002a26:	4649      	mov	r1, r9
 8002a28:	4638      	mov	r0, r7
 8002a2a:	47c0      	blx	r8
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d103      	bne.n	8002a38 <_printf_common+0xac>
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a38:	3501      	adds	r5, #1
 8002a3a:	e7c6      	b.n	80029ca <_printf_common+0x3e>
 8002a3c:	18e1      	adds	r1, r4, r3
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	2030      	movs	r0, #48	; 0x30
 8002a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a46:	4422      	add	r2, r4
 8002a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a50:	3302      	adds	r3, #2
 8002a52:	e7c7      	b.n	80029e4 <_printf_common+0x58>
 8002a54:	2301      	movs	r3, #1
 8002a56:	4622      	mov	r2, r4
 8002a58:	4649      	mov	r1, r9
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	47c0      	blx	r8
 8002a5e:	3001      	adds	r0, #1
 8002a60:	d0e6      	beq.n	8002a30 <_printf_common+0xa4>
 8002a62:	3601      	adds	r6, #1
 8002a64:	e7d9      	b.n	8002a1a <_printf_common+0x8e>
	...

08002a68 <_printf_i>:
 8002a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	4691      	mov	r9, r2
 8002a70:	7e27      	ldrb	r7, [r4, #24]
 8002a72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a74:	2f78      	cmp	r7, #120	; 0x78
 8002a76:	4680      	mov	r8, r0
 8002a78:	469a      	mov	sl, r3
 8002a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a7e:	d807      	bhi.n	8002a90 <_printf_i+0x28>
 8002a80:	2f62      	cmp	r7, #98	; 0x62
 8002a82:	d80a      	bhi.n	8002a9a <_printf_i+0x32>
 8002a84:	2f00      	cmp	r7, #0
 8002a86:	f000 80d8 	beq.w	8002c3a <_printf_i+0x1d2>
 8002a8a:	2f58      	cmp	r7, #88	; 0x58
 8002a8c:	f000 80a3 	beq.w	8002bd6 <_printf_i+0x16e>
 8002a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a98:	e03a      	b.n	8002b10 <_printf_i+0xa8>
 8002a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a9e:	2b15      	cmp	r3, #21
 8002aa0:	d8f6      	bhi.n	8002a90 <_printf_i+0x28>
 8002aa2:	a001      	add	r0, pc, #4	; (adr r0, 8002aa8 <_printf_i+0x40>)
 8002aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002aa8:	08002b01 	.word	0x08002b01
 8002aac:	08002b15 	.word	0x08002b15
 8002ab0:	08002a91 	.word	0x08002a91
 8002ab4:	08002a91 	.word	0x08002a91
 8002ab8:	08002a91 	.word	0x08002a91
 8002abc:	08002a91 	.word	0x08002a91
 8002ac0:	08002b15 	.word	0x08002b15
 8002ac4:	08002a91 	.word	0x08002a91
 8002ac8:	08002a91 	.word	0x08002a91
 8002acc:	08002a91 	.word	0x08002a91
 8002ad0:	08002a91 	.word	0x08002a91
 8002ad4:	08002c21 	.word	0x08002c21
 8002ad8:	08002b45 	.word	0x08002b45
 8002adc:	08002c03 	.word	0x08002c03
 8002ae0:	08002a91 	.word	0x08002a91
 8002ae4:	08002a91 	.word	0x08002a91
 8002ae8:	08002c43 	.word	0x08002c43
 8002aec:	08002a91 	.word	0x08002a91
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002a91 	.word	0x08002a91
 8002af8:	08002a91 	.word	0x08002a91
 8002afc:	08002c0b 	.word	0x08002c0b
 8002b00:	680b      	ldr	r3, [r1, #0]
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	600a      	str	r2, [r1, #0]
 8002b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0a3      	b.n	8002c5c <_printf_i+0x1f4>
 8002b14:	6825      	ldr	r5, [r4, #0]
 8002b16:	6808      	ldr	r0, [r1, #0]
 8002b18:	062e      	lsls	r6, r5, #24
 8002b1a:	f100 0304 	add.w	r3, r0, #4
 8002b1e:	d50a      	bpl.n	8002b36 <_printf_i+0xce>
 8002b20:	6805      	ldr	r5, [r0, #0]
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	da03      	bge.n	8002b30 <_printf_i+0xc8>
 8002b28:	232d      	movs	r3, #45	; 0x2d
 8002b2a:	426d      	negs	r5, r5
 8002b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b30:	485e      	ldr	r0, [pc, #376]	; (8002cac <_printf_i+0x244>)
 8002b32:	230a      	movs	r3, #10
 8002b34:	e019      	b.n	8002b6a <_printf_i+0x102>
 8002b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b3a:	6805      	ldr	r5, [r0, #0]
 8002b3c:	600b      	str	r3, [r1, #0]
 8002b3e:	bf18      	it	ne
 8002b40:	b22d      	sxthne	r5, r5
 8002b42:	e7ef      	b.n	8002b24 <_printf_i+0xbc>
 8002b44:	680b      	ldr	r3, [r1, #0]
 8002b46:	6825      	ldr	r5, [r4, #0]
 8002b48:	1d18      	adds	r0, r3, #4
 8002b4a:	6008      	str	r0, [r1, #0]
 8002b4c:	0628      	lsls	r0, r5, #24
 8002b4e:	d501      	bpl.n	8002b54 <_printf_i+0xec>
 8002b50:	681d      	ldr	r5, [r3, #0]
 8002b52:	e002      	b.n	8002b5a <_printf_i+0xf2>
 8002b54:	0669      	lsls	r1, r5, #25
 8002b56:	d5fb      	bpl.n	8002b50 <_printf_i+0xe8>
 8002b58:	881d      	ldrh	r5, [r3, #0]
 8002b5a:	4854      	ldr	r0, [pc, #336]	; (8002cac <_printf_i+0x244>)
 8002b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8002b5e:	bf0c      	ite	eq
 8002b60:	2308      	moveq	r3, #8
 8002b62:	230a      	movne	r3, #10
 8002b64:	2100      	movs	r1, #0
 8002b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b6a:	6866      	ldr	r6, [r4, #4]
 8002b6c:	60a6      	str	r6, [r4, #8]
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	bfa2      	ittt	ge
 8002b72:	6821      	ldrge	r1, [r4, #0]
 8002b74:	f021 0104 	bicge.w	r1, r1, #4
 8002b78:	6021      	strge	r1, [r4, #0]
 8002b7a:	b90d      	cbnz	r5, 8002b80 <_printf_i+0x118>
 8002b7c:	2e00      	cmp	r6, #0
 8002b7e:	d04d      	beq.n	8002c1c <_printf_i+0x1b4>
 8002b80:	4616      	mov	r6, r2
 8002b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b86:	fb03 5711 	mls	r7, r3, r1, r5
 8002b8a:	5dc7      	ldrb	r7, [r0, r7]
 8002b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b90:	462f      	mov	r7, r5
 8002b92:	42bb      	cmp	r3, r7
 8002b94:	460d      	mov	r5, r1
 8002b96:	d9f4      	bls.n	8002b82 <_printf_i+0x11a>
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d10b      	bne.n	8002bb4 <_printf_i+0x14c>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	07df      	lsls	r7, r3, #31
 8002ba0:	d508      	bpl.n	8002bb4 <_printf_i+0x14c>
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	6861      	ldr	r1, [r4, #4]
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	bfde      	ittt	le
 8002baa:	2330      	movle	r3, #48	; 0x30
 8002bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bb0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002bb4:	1b92      	subs	r2, r2, r6
 8002bb6:	6122      	str	r2, [r4, #16]
 8002bb8:	f8cd a000 	str.w	sl, [sp]
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	aa03      	add	r2, sp, #12
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	f7ff fee2 	bl	800298c <_printf_common>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d14c      	bne.n	8002c66 <_printf_i+0x1fe>
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd0:	b004      	add	sp, #16
 8002bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd6:	4835      	ldr	r0, [pc, #212]	; (8002cac <_printf_i+0x244>)
 8002bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	680e      	ldr	r6, [r1, #0]
 8002be0:	061f      	lsls	r7, r3, #24
 8002be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002be6:	600e      	str	r6, [r1, #0]
 8002be8:	d514      	bpl.n	8002c14 <_printf_i+0x1ac>
 8002bea:	07d9      	lsls	r1, r3, #31
 8002bec:	bf44      	itt	mi
 8002bee:	f043 0320 	orrmi.w	r3, r3, #32
 8002bf2:	6023      	strmi	r3, [r4, #0]
 8002bf4:	b91d      	cbnz	r5, 8002bfe <_printf_i+0x196>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	f023 0320 	bic.w	r3, r3, #32
 8002bfc:	6023      	str	r3, [r4, #0]
 8002bfe:	2310      	movs	r3, #16
 8002c00:	e7b0      	b.n	8002b64 <_printf_i+0xfc>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f043 0320 	orr.w	r3, r3, #32
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	2378      	movs	r3, #120	; 0x78
 8002c0c:	4828      	ldr	r0, [pc, #160]	; (8002cb0 <_printf_i+0x248>)
 8002c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c12:	e7e3      	b.n	8002bdc <_printf_i+0x174>
 8002c14:	065e      	lsls	r6, r3, #25
 8002c16:	bf48      	it	mi
 8002c18:	b2ad      	uxthmi	r5, r5
 8002c1a:	e7e6      	b.n	8002bea <_printf_i+0x182>
 8002c1c:	4616      	mov	r6, r2
 8002c1e:	e7bb      	b.n	8002b98 <_printf_i+0x130>
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	6826      	ldr	r6, [r4, #0]
 8002c24:	6960      	ldr	r0, [r4, #20]
 8002c26:	1d1d      	adds	r5, r3, #4
 8002c28:	600d      	str	r5, [r1, #0]
 8002c2a:	0635      	lsls	r5, r6, #24
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	d501      	bpl.n	8002c34 <_printf_i+0x1cc>
 8002c30:	6018      	str	r0, [r3, #0]
 8002c32:	e002      	b.n	8002c3a <_printf_i+0x1d2>
 8002c34:	0671      	lsls	r1, r6, #25
 8002c36:	d5fb      	bpl.n	8002c30 <_printf_i+0x1c8>
 8002c38:	8018      	strh	r0, [r3, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6123      	str	r3, [r4, #16]
 8002c3e:	4616      	mov	r6, r2
 8002c40:	e7ba      	b.n	8002bb8 <_printf_i+0x150>
 8002c42:	680b      	ldr	r3, [r1, #0]
 8002c44:	1d1a      	adds	r2, r3, #4
 8002c46:	600a      	str	r2, [r1, #0]
 8002c48:	681e      	ldr	r6, [r3, #0]
 8002c4a:	6862      	ldr	r2, [r4, #4]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4630      	mov	r0, r6
 8002c50:	f7fd face 	bl	80001f0 <memchr>
 8002c54:	b108      	cbz	r0, 8002c5a <_printf_i+0x1f2>
 8002c56:	1b80      	subs	r0, r0, r6
 8002c58:	6060      	str	r0, [r4, #4]
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	6123      	str	r3, [r4, #16]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c64:	e7a8      	b.n	8002bb8 <_printf_i+0x150>
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	4632      	mov	r2, r6
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	47d0      	blx	sl
 8002c70:	3001      	adds	r0, #1
 8002c72:	d0ab      	beq.n	8002bcc <_printf_i+0x164>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	079b      	lsls	r3, r3, #30
 8002c78:	d413      	bmi.n	8002ca2 <_printf_i+0x23a>
 8002c7a:	68e0      	ldr	r0, [r4, #12]
 8002c7c:	9b03      	ldr	r3, [sp, #12]
 8002c7e:	4298      	cmp	r0, r3
 8002c80:	bfb8      	it	lt
 8002c82:	4618      	movlt	r0, r3
 8002c84:	e7a4      	b.n	8002bd0 <_printf_i+0x168>
 8002c86:	2301      	movs	r3, #1
 8002c88:	4632      	mov	r2, r6
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	47d0      	blx	sl
 8002c90:	3001      	adds	r0, #1
 8002c92:	d09b      	beq.n	8002bcc <_printf_i+0x164>
 8002c94:	3501      	adds	r5, #1
 8002c96:	68e3      	ldr	r3, [r4, #12]
 8002c98:	9903      	ldr	r1, [sp, #12]
 8002c9a:	1a5b      	subs	r3, r3, r1
 8002c9c:	42ab      	cmp	r3, r5
 8002c9e:	dcf2      	bgt.n	8002c86 <_printf_i+0x21e>
 8002ca0:	e7eb      	b.n	8002c7a <_printf_i+0x212>
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	f104 0619 	add.w	r6, r4, #25
 8002ca8:	e7f5      	b.n	8002c96 <_printf_i+0x22e>
 8002caa:	bf00      	nop
 8002cac:	08003001 	.word	0x08003001
 8002cb0:	08003012 	.word	0x08003012

08002cb4 <memcpy>:
 8002cb4:	440a      	add	r2, r1
 8002cb6:	4291      	cmp	r1, r2
 8002cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002cbc:	d100      	bne.n	8002cc0 <memcpy+0xc>
 8002cbe:	4770      	bx	lr
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cca:	4291      	cmp	r1, r2
 8002ccc:	d1f9      	bne.n	8002cc2 <memcpy+0xe>
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <memmove>:
 8002cd0:	4288      	cmp	r0, r1
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	eb01 0402 	add.w	r4, r1, r2
 8002cd8:	d902      	bls.n	8002ce0 <memmove+0x10>
 8002cda:	4284      	cmp	r4, r0
 8002cdc:	4623      	mov	r3, r4
 8002cde:	d807      	bhi.n	8002cf0 <memmove+0x20>
 8002ce0:	1e43      	subs	r3, r0, #1
 8002ce2:	42a1      	cmp	r1, r4
 8002ce4:	d008      	beq.n	8002cf8 <memmove+0x28>
 8002ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cee:	e7f8      	b.n	8002ce2 <memmove+0x12>
 8002cf0:	4402      	add	r2, r0
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	428a      	cmp	r2, r1
 8002cf6:	d100      	bne.n	8002cfa <memmove+0x2a>
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d02:	e7f7      	b.n	8002cf4 <memmove+0x24>

08002d04 <_free_r>:
 8002d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d06:	2900      	cmp	r1, #0
 8002d08:	d048      	beq.n	8002d9c <_free_r+0x98>
 8002d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d0e:	9001      	str	r0, [sp, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f1a1 0404 	sub.w	r4, r1, #4
 8002d16:	bfb8      	it	lt
 8002d18:	18e4      	addlt	r4, r4, r3
 8002d1a:	f000 f8d3 	bl	8002ec4 <__malloc_lock>
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <_free_r+0x9c>)
 8002d20:	9801      	ldr	r0, [sp, #4]
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	4615      	mov	r5, r2
 8002d26:	b933      	cbnz	r3, 8002d36 <_free_r+0x32>
 8002d28:	6063      	str	r3, [r4, #4]
 8002d2a:	6014      	str	r4, [r2, #0]
 8002d2c:	b003      	add	sp, #12
 8002d2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d32:	f000 b8cd 	b.w	8002ed0 <__malloc_unlock>
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	d90b      	bls.n	8002d52 <_free_r+0x4e>
 8002d3a:	6821      	ldr	r1, [r4, #0]
 8002d3c:	1862      	adds	r2, r4, r1
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	bf04      	itt	eq
 8002d42:	681a      	ldreq	r2, [r3, #0]
 8002d44:	685b      	ldreq	r3, [r3, #4]
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	bf04      	itt	eq
 8002d4a:	1852      	addeq	r2, r2, r1
 8002d4c:	6022      	streq	r2, [r4, #0]
 8002d4e:	602c      	str	r4, [r5, #0]
 8002d50:	e7ec      	b.n	8002d2c <_free_r+0x28>
 8002d52:	461a      	mov	r2, r3
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b10b      	cbz	r3, 8002d5c <_free_r+0x58>
 8002d58:	42a3      	cmp	r3, r4
 8002d5a:	d9fa      	bls.n	8002d52 <_free_r+0x4e>
 8002d5c:	6811      	ldr	r1, [r2, #0]
 8002d5e:	1855      	adds	r5, r2, r1
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d10b      	bne.n	8002d7c <_free_r+0x78>
 8002d64:	6824      	ldr	r4, [r4, #0]
 8002d66:	4421      	add	r1, r4
 8002d68:	1854      	adds	r4, r2, r1
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	d1dd      	bne.n	8002d2c <_free_r+0x28>
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6053      	str	r3, [r2, #4]
 8002d76:	4421      	add	r1, r4
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	e7d7      	b.n	8002d2c <_free_r+0x28>
 8002d7c:	d902      	bls.n	8002d84 <_free_r+0x80>
 8002d7e:	230c      	movs	r3, #12
 8002d80:	6003      	str	r3, [r0, #0]
 8002d82:	e7d3      	b.n	8002d2c <_free_r+0x28>
 8002d84:	6825      	ldr	r5, [r4, #0]
 8002d86:	1961      	adds	r1, r4, r5
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	bf04      	itt	eq
 8002d8c:	6819      	ldreq	r1, [r3, #0]
 8002d8e:	685b      	ldreq	r3, [r3, #4]
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	bf04      	itt	eq
 8002d94:	1949      	addeq	r1, r1, r5
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	6054      	str	r4, [r2, #4]
 8002d9a:	e7c7      	b.n	8002d2c <_free_r+0x28>
 8002d9c:	b003      	add	sp, #12
 8002d9e:	bd30      	pop	{r4, r5, pc}
 8002da0:	20000110 	.word	0x20000110

08002da4 <_malloc_r>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	1ccd      	adds	r5, r1, #3
 8002da8:	f025 0503 	bic.w	r5, r5, #3
 8002dac:	3508      	adds	r5, #8
 8002dae:	2d0c      	cmp	r5, #12
 8002db0:	bf38      	it	cc
 8002db2:	250c      	movcc	r5, #12
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	4606      	mov	r6, r0
 8002db8:	db01      	blt.n	8002dbe <_malloc_r+0x1a>
 8002dba:	42a9      	cmp	r1, r5
 8002dbc:	d903      	bls.n	8002dc6 <_malloc_r+0x22>
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc6:	f000 f87d 	bl	8002ec4 <__malloc_lock>
 8002dca:	4921      	ldr	r1, [pc, #132]	; (8002e50 <_malloc_r+0xac>)
 8002dcc:	680a      	ldr	r2, [r1, #0]
 8002dce:	4614      	mov	r4, r2
 8002dd0:	b99c      	cbnz	r4, 8002dfa <_malloc_r+0x56>
 8002dd2:	4f20      	ldr	r7, [pc, #128]	; (8002e54 <_malloc_r+0xb0>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b923      	cbnz	r3, 8002de2 <_malloc_r+0x3e>
 8002dd8:	4621      	mov	r1, r4
 8002dda:	4630      	mov	r0, r6
 8002ddc:	f000 f862 	bl	8002ea4 <_sbrk_r>
 8002de0:	6038      	str	r0, [r7, #0]
 8002de2:	4629      	mov	r1, r5
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 f85d 	bl	8002ea4 <_sbrk_r>
 8002dea:	1c43      	adds	r3, r0, #1
 8002dec:	d123      	bne.n	8002e36 <_malloc_r+0x92>
 8002dee:	230c      	movs	r3, #12
 8002df0:	6033      	str	r3, [r6, #0]
 8002df2:	4630      	mov	r0, r6
 8002df4:	f000 f86c 	bl	8002ed0 <__malloc_unlock>
 8002df8:	e7e3      	b.n	8002dc2 <_malloc_r+0x1e>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	1b5b      	subs	r3, r3, r5
 8002dfe:	d417      	bmi.n	8002e30 <_malloc_r+0x8c>
 8002e00:	2b0b      	cmp	r3, #11
 8002e02:	d903      	bls.n	8002e0c <_malloc_r+0x68>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	441c      	add	r4, r3
 8002e08:	6025      	str	r5, [r4, #0]
 8002e0a:	e004      	b.n	8002e16 <_malloc_r+0x72>
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	42a2      	cmp	r2, r4
 8002e10:	bf0c      	ite	eq
 8002e12:	600b      	streq	r3, [r1, #0]
 8002e14:	6053      	strne	r3, [r2, #4]
 8002e16:	4630      	mov	r0, r6
 8002e18:	f000 f85a 	bl	8002ed0 <__malloc_unlock>
 8002e1c:	f104 000b 	add.w	r0, r4, #11
 8002e20:	1d23      	adds	r3, r4, #4
 8002e22:	f020 0007 	bic.w	r0, r0, #7
 8002e26:	1ac2      	subs	r2, r0, r3
 8002e28:	d0cc      	beq.n	8002dc4 <_malloc_r+0x20>
 8002e2a:	1a1b      	subs	r3, r3, r0
 8002e2c:	50a3      	str	r3, [r4, r2]
 8002e2e:	e7c9      	b.n	8002dc4 <_malloc_r+0x20>
 8002e30:	4622      	mov	r2, r4
 8002e32:	6864      	ldr	r4, [r4, #4]
 8002e34:	e7cc      	b.n	8002dd0 <_malloc_r+0x2c>
 8002e36:	1cc4      	adds	r4, r0, #3
 8002e38:	f024 0403 	bic.w	r4, r4, #3
 8002e3c:	42a0      	cmp	r0, r4
 8002e3e:	d0e3      	beq.n	8002e08 <_malloc_r+0x64>
 8002e40:	1a21      	subs	r1, r4, r0
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f82e 	bl	8002ea4 <_sbrk_r>
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d1dd      	bne.n	8002e08 <_malloc_r+0x64>
 8002e4c:	e7cf      	b.n	8002dee <_malloc_r+0x4a>
 8002e4e:	bf00      	nop
 8002e50:	20000110 	.word	0x20000110
 8002e54:	20000114 	.word	0x20000114

08002e58 <_realloc_r>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	4607      	mov	r7, r0
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	460e      	mov	r6, r1
 8002e60:	b921      	cbnz	r1, 8002e6c <_realloc_r+0x14>
 8002e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e66:	4611      	mov	r1, r2
 8002e68:	f7ff bf9c 	b.w	8002da4 <_malloc_r>
 8002e6c:	b922      	cbnz	r2, 8002e78 <_realloc_r+0x20>
 8002e6e:	f7ff ff49 	bl	8002d04 <_free_r>
 8002e72:	4625      	mov	r5, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e78:	f000 f830 	bl	8002edc <_malloc_usable_size_r>
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d20f      	bcs.n	8002ea0 <_realloc_r+0x48>
 8002e80:	4621      	mov	r1, r4
 8002e82:	4638      	mov	r0, r7
 8002e84:	f7ff ff8e 	bl	8002da4 <_malloc_r>
 8002e88:	4605      	mov	r5, r0
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d0f2      	beq.n	8002e74 <_realloc_r+0x1c>
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4622      	mov	r2, r4
 8002e92:	f7ff ff0f 	bl	8002cb4 <memcpy>
 8002e96:	4631      	mov	r1, r6
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f7ff ff33 	bl	8002d04 <_free_r>
 8002e9e:	e7e9      	b.n	8002e74 <_realloc_r+0x1c>
 8002ea0:	4635      	mov	r5, r6
 8002ea2:	e7e7      	b.n	8002e74 <_realloc_r+0x1c>

08002ea4 <_sbrk_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d06      	ldr	r5, [pc, #24]	; (8002ec0 <_sbrk_r+0x1c>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f7fd fcd8 	bl	8000864 <_sbrk>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_sbrk_r+0x1a>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_sbrk_r+0x1a>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000164 	.word	0x20000164

08002ec4 <__malloc_lock>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <__malloc_lock+0x8>)
 8002ec6:	f000 b811 	b.w	8002eec <__retarget_lock_acquire_recursive>
 8002eca:	bf00      	nop
 8002ecc:	2000016c 	.word	0x2000016c

08002ed0 <__malloc_unlock>:
 8002ed0:	4801      	ldr	r0, [pc, #4]	; (8002ed8 <__malloc_unlock+0x8>)
 8002ed2:	f000 b80c 	b.w	8002eee <__retarget_lock_release_recursive>
 8002ed6:	bf00      	nop
 8002ed8:	2000016c 	.word	0x2000016c

08002edc <_malloc_usable_size_r>:
 8002edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ee0:	1f18      	subs	r0, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bfbc      	itt	lt
 8002ee6:	580b      	ldrlt	r3, [r1, r0]
 8002ee8:	18c0      	addlt	r0, r0, r3
 8002eea:	4770      	bx	lr

08002eec <__retarget_lock_acquire_recursive>:
 8002eec:	4770      	bx	lr

08002eee <__retarget_lock_release_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <_init>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr

08002efc <_fini>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr
