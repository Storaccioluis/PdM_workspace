
TPF_PdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000f0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010521  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002159  00000000  00000000  000305d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  000333d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025673  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f536  00000000  00000000  0005960b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c30  00000000  00000000  00068b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014d771  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003894  00000000  00000000  0014d7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003de0 	.word	0x08003de0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08003de0 	.word	0x08003de0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <delayInit>:

#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
delay->duration= duration;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	605a      	str	r2, [r3, #4]
delay->running=0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	721a      	strb	r2, [r3, #8]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <delayRead>:


bool_t delayRead( delay_t *delay ){
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]

	bool_t tiempo_cumplido=false;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
    uint32_t dif_valor=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  if(!delay->running)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7a1b      	ldrb	r3, [r3, #8]
 80005be:	f083 0301 	eor.w	r3, r3, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d008      	beq.n	80005da <delayRead+0x30>
     {delay->startTime = HAL_GetTick();
 80005c8:	f000 fd94 	bl	80010f4 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
      delay->running=true;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2201      	movs	r2, #1
 80005d6:	721a      	strb	r2, [r3, #8]
 80005d8:	e013      	b.n	8000602 <delayRead+0x58>
     }
  else{
	   dif_valor=HAL_GetTick()-delay->startTime;
 80005da:	f000 fd8b 	bl	80010f4 <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	60bb      	str	r3, [r7, #8]
	   if(dif_valor>=delay->duration)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d305      	bcc.n	80005fe <delayRead+0x54>
	      {tiempo_cumplido=true;
 80005f2:	2301      	movs	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
	       delay->running=false;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	721a      	strb	r2, [r3, #8]
 80005fc:	e001      	b.n	8000602 <delayRead+0x58>
		  }
	   else{tiempo_cumplido=false;}
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
       }
 return tiempo_cumplido;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <menuInit>:
#define Message_intro "\n\r"


// Función Inicializar MEF
bool_t menuInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    delayInit(&delay,DELAY_TIME );
 8000610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <menuInit+0x2c>)
 8000616:	f7ff ffb7 	bl	8000588 <delayInit>
	delayInit(&duty,DELAY_TIME );
 800061a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800061e:	4807      	ldr	r0, [pc, #28]	; (800063c <menuInit+0x30>)
 8000620:	f7ff ffb2 	bl	8000588 <delayInit>
	menuState = READ_FIRST_C;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <menuInit+0x34>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	secuencia=false;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <menuInit+0x38>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	return true;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000009c 	.word	0x2000009c
 800063c:	200000a8 	.word	0x200000a8
 8000640:	200000cd 	.word	0x200000cd
 8000644:	200000cc 	.word	0x200000cc

08000648 <menuUpdate>:
static uint16_t delayTurn=0;




void menuUpdate(uint16_t *dirP){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	switch (menuState) {
 8000650:	4b9a      	ldr	r3, [pc, #616]	; (80008bc <menuUpdate+0x274>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b05      	cmp	r3, #5
 8000656:	f200 8125 	bhi.w	80008a4 <menuUpdate+0x25c>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <menuUpdate+0x18>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000679 	.word	0x08000679
 8000664:	080006db 	.word	0x080006db
 8000668:	08000843 	.word	0x08000843
 800066c:	0800077d 	.word	0x0800077d
 8000670:	08000807 	.word	0x08000807
 8000674:	08000881 	.word	0x08000881
	case READ_FIRST_C :
	{
		uartSendString(Message_1,sizeof(Message_1)/sizeof(char));
 8000678:	2120      	movs	r1, #32
 800067a:	4891      	ldr	r0, [pc, #580]	; (80008c0 <menuUpdate+0x278>)
 800067c:	f000 f9a2 	bl	80009c4 <uartSendString>
		uartReceiveString(&dataReceive,1,500);
 8000680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000684:	2101      	movs	r1, #1
 8000686:	488f      	ldr	r0, [pc, #572]	; (80008c4 <menuUpdate+0x27c>)
 8000688:	f000 f9c0 	bl	8000a0c <uartReceiveString>
		if(dataReceive!=NULL)
 800068c:	4b8d      	ldr	r3, [pc, #564]	; (80008c4 <menuUpdate+0x27c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01e      	beq.n	80006d2 <menuUpdate+0x8a>
		{
			if('+'==dataReceive)    //Clockwise
 8000694:	4b8b      	ldr	r3, [pc, #556]	; (80008c4 <menuUpdate+0x27c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b2b      	cmp	r3, #43	; 0x2b
 800069a:	d105      	bne.n	80006a8 <menuUpdate+0x60>
			{   turn=0;
 800069c:	4b8a      	ldr	r3, [pc, #552]	; (80008c8 <menuUpdate+0x280>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
				menuState=READ_NUMBER_STEP;
 80006a2:	4b86      	ldr	r3, [pc, #536]	; (80008bc <menuUpdate+0x274>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
			}
			if('-'==dataReceive)
 80006a8:	4b86      	ldr	r3, [pc, #536]	; (80008c4 <menuUpdate+0x27c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b2d      	cmp	r3, #45	; 0x2d
 80006ae:	d105      	bne.n	80006bc <menuUpdate+0x74>
			{   turn=1;
 80006b0:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <menuUpdate+0x280>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
				menuState=READ_NUMBER_STEP;
 80006b6:	4b81      	ldr	r3, [pc, #516]	; (80008bc <menuUpdate+0x274>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
			}
			if(('+'!=dataReceive)&&('-'!=dataReceive))
 80006bc:	4b81      	ldr	r3, [pc, #516]	; (80008c4 <menuUpdate+0x27c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b2b      	cmp	r3, #43	; 0x2b
 80006c2:	d006      	beq.n	80006d2 <menuUpdate+0x8a>
 80006c4:	4b7f      	ldr	r3, [pc, #508]	; (80008c4 <menuUpdate+0x27c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b2d      	cmp	r3, #45	; 0x2d
 80006ca:	d002      	beq.n	80006d2 <menuUpdate+0x8a>
			{
				menuState=STATUS_CHARACTER_INCORRECT;
 80006cc:	4b7b      	ldr	r3, [pc, #492]	; (80008bc <menuUpdate+0x274>)
 80006ce:	2205      	movs	r2, #5
 80006d0:	701a      	strb	r2, [r3, #0]
			}
		}
		dataReceive=NULL;
 80006d2:	4b7c      	ldr	r3, [pc, #496]	; (80008c4 <menuUpdate+0x27c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	}
	break;
 80006d8:	e0ec      	b.n	80008b4 <menuUpdate+0x26c>
	case READ_NUMBER_STEP:
	{		uartSendString(Message_3,sizeof(Message_3)/sizeof(char));
 80006da:	213f      	movs	r1, #63	; 0x3f
 80006dc:	487b      	ldr	r0, [pc, #492]	; (80008cc <menuUpdate+0x284>)
 80006de:	f000 f971 	bl	80009c4 <uartSendString>
			uartReceiveString(&dataReceive,1,500);
 80006e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e6:	2101      	movs	r1, #1
 80006e8:	4876      	ldr	r0, [pc, #472]	; (80008c4 <menuUpdate+0x27c>)
 80006ea:	f000 f98f 	bl	8000a0c <uartReceiveString>
				if(dataReceive!=NULL)
 80006ee:	4b75      	ldr	r3, [pc, #468]	; (80008c4 <menuUpdate+0x27c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 80d9 	beq.w	80008aa <menuUpdate+0x262>
					{ if('9'==dataGrade[0])
 80006f8:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <menuUpdate+0x288>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b39      	cmp	r3, #57	; 0x39
 80006fe:	d103      	bne.n	8000708 <menuUpdate+0xc0>
							{dMax='0';}
 8000700:	4b74      	ldr	r3, [pc, #464]	; (80008d4 <menuUpdate+0x28c>)
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e002      	b.n	800070e <menuUpdate+0xc6>
						else {dMax='9';}
 8000708:	4b72      	ldr	r3, [pc, #456]	; (80008d4 <menuUpdate+0x28c>)
 800070a:	2239      	movs	r2, #57	; 0x39
 800070c:	701a      	strb	r2, [r3, #0]
						if((48<=dataReceive)&&(dMax>=dataReceive))
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <menuUpdate+0x27c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b2f      	cmp	r3, #47	; 0x2f
 8000714:	d913      	bls.n	800073e <menuUpdate+0xf6>
 8000716:	4b6f      	ldr	r3, [pc, #444]	; (80008d4 <menuUpdate+0x28c>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <menuUpdate+0x27c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d30d      	bcc.n	800073e <menuUpdate+0xf6>
							{ dataGrade[dGinc]=dataReceive;
 8000722:	4b6d      	ldr	r3, [pc, #436]	; (80008d8 <menuUpdate+0x290>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <menuUpdate+0x27c>)
 800072a:	7819      	ldrb	r1, [r3, #0]
 800072c:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <menuUpdate+0x288>)
 800072e:	5499      	strb	r1, [r3, r2]
								dGinc++;
 8000730:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <menuUpdate+0x290>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <menuUpdate+0x290>)
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e007      	b.n	800074e <menuUpdate+0x106>
							}
						else{ if(Intro!=dataReceive)
 800073e:	4b61      	ldr	r3, [pc, #388]	; (80008c4 <menuUpdate+0x27c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b0d      	cmp	r3, #13
 8000744:	d003      	beq.n	800074e <menuUpdate+0x106>
								{uartSendString(Message_2,sizeof(Message_2)/sizeof(char));}
 8000746:	212c      	movs	r1, #44	; 0x2c
 8000748:	4864      	ldr	r0, [pc, #400]	; (80008dc <menuUpdate+0x294>)
 800074a:	f000 f93b 	bl	80009c4 <uartSendString>
							}
						if(Intro==dataReceive)
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <menuUpdate+0x27c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b0d      	cmp	r3, #13
 8000754:	d10e      	bne.n	8000774 <menuUpdate+0x12c>
						{
							uartSendString(Message_4,sizeof(Message_4)/sizeof(char));
 8000756:	2125      	movs	r1, #37	; 0x25
 8000758:	4861      	ldr	r0, [pc, #388]	; (80008e0 <menuUpdate+0x298>)
 800075a:	f000 f933 	bl	80009c4 <uartSendString>
							uartSendString(dataGrade,sizeof(dataGrade)/sizeof(char));
 800075e:	2102      	movs	r1, #2
 8000760:	485b      	ldr	r0, [pc, #364]	; (80008d0 <menuUpdate+0x288>)
 8000762:	f000 f92f 	bl	80009c4 <uartSendString>
							uartSendString(Message_intro,sizeof(Message_intro)/sizeof(char));
 8000766:	2103      	movs	r1, #3
 8000768:	485e      	ldr	r0, [pc, #376]	; (80008e4 <menuUpdate+0x29c>)
 800076a:	f000 f92b 	bl	80009c4 <uartSendString>
							menuState=VALIDATE_STEP;
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <menuUpdate+0x274>)
 8000770:	2202      	movs	r2, #2
 8000772:	701a      	strb	r2, [r3, #0]

						}
						dataReceive=NULL;
 8000774:	4b53      	ldr	r3, [pc, #332]	; (80008c4 <menuUpdate+0x27c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
					}
	}
	break;
 800077a:	e096      	b.n	80008aa <menuUpdate+0x262>

	case TURN_SERVO :
	{      uartSendString(Message_Clear,sizeof(Message_Clear)/sizeof(char));
 800077c:	2106      	movs	r1, #6
 800077e:	485a      	ldr	r0, [pc, #360]	; (80008e8 <menuUpdate+0x2a0>)
 8000780:	f000 f920 	bl	80009c4 <uartSendString>
		   delayTurn=CharToInt(&dataGrade);
 8000784:	4852      	ldr	r0, [pc, #328]	; (80008d0 <menuUpdate+0x288>)
 8000786:	f000 f8bb 	bl	8000900 <CharToInt>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b57      	ldr	r3, [pc, #348]	; (80008ec <menuUpdate+0x2a4>)
 8000790:	801a      	strh	r2, [r3, #0]
		   if(turn==0)
 8000792:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <menuUpdate+0x280>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f083 0301 	eor.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d014      	beq.n	80007ca <menuUpdate+0x182>
		   {delayTurn= (delayTurn*657/180) + 656;}
 80007a0:	4b52      	ldr	r3, [pc, #328]	; (80008ec <menuUpdate+0x2a4>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	f240 2391 	movw	r3, #657	; 0x291
 80007aa:	fb03 f302 	mul.w	r3, r3, r2
 80007ae:	4a50      	ldr	r2, [pc, #320]	; (80008f0 <menuUpdate+0x2a8>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	441a      	add	r2, r3
 80007b6:	11d2      	asrs	r2, r2, #7
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <menuUpdate+0x2a4>)
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	e013      	b.n	80007f2 <menuUpdate+0x1aa>
		   else{delayTurn= ((delayTurn + 90)*657/180)+656;}
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <menuUpdate+0x2a4>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	335a      	adds	r3, #90	; 0x5a
 80007d0:	f240 2291 	movw	r2, #657	; 0x291
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	4a45      	ldr	r2, [pc, #276]	; (80008f0 <menuUpdate+0x2a8>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	441a      	add	r2, r3
 80007e0:	11d2      	asrs	r2, r2, #7
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <menuUpdate+0x2a4>)
 80007f0:	801a      	strh	r2, [r3, #0]
           *dirP=delayTurn;
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <menuUpdate+0x2a4>)
 80007f4:	881a      	ldrh	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	801a      	strh	r2, [r3, #0]
		   PWM_START();
 80007fa:	f000 f94b 	bl	8000a94 <PWM_START>
		   menuState=STATUS_TURN;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <menuUpdate+0x274>)
 8000800:	2204      	movs	r2, #4
 8000802:	701a      	strb	r2, [r3, #0]
    }
	break;
 8000804:	e056      	b.n	80008b4 <menuUpdate+0x26c>
	case STATUS_TURN :
	{
		        uartSendString(Message_7,sizeof(Message_7)/sizeof(char));
 8000806:	2113      	movs	r1, #19
 8000808:	483a      	ldr	r0, [pc, #232]	; (80008f4 <menuUpdate+0x2ac>)
 800080a:	f000 f8db 	bl	80009c4 <uartSendString>
      			if(delayRead(&delay))
 800080e:	483a      	ldr	r0, [pc, #232]	; (80008f8 <menuUpdate+0x2b0>)
 8000810:	f7ff fecb 	bl	80005aa <delayRead>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <menuUpdate+0x1e0>
				{menuState=READ_FIRST_C;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <menuUpdate+0x274>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
				uartSendString(Message_Clear,sizeof(Message_Clear)/sizeof(char));
 8000820:	2106      	movs	r1, #6
 8000822:	4831      	ldr	r0, [pc, #196]	; (80008e8 <menuUpdate+0x2a0>)
 8000824:	f000 f8ce 	bl	80009c4 <uartSendString>
				}
				dataReceive=NULL;
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <menuUpdate+0x27c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
				dataGrade[0]=0;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <menuUpdate+0x288>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
			    dataGrade[1]=0;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <menuUpdate+0x288>)
 8000836:	2200      	movs	r2, #0
 8000838:	705a      	strb	r2, [r3, #1]
			    dGinc=0;
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <menuUpdate+0x290>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	}
	break;
 8000840:	e038      	b.n	80008b4 <menuUpdate+0x26c>
	case VALIDATE_STEP:
		{uartSendString(Message_5,sizeof(Message_5)/sizeof(char));
 8000842:	2137      	movs	r1, #55	; 0x37
 8000844:	482d      	ldr	r0, [pc, #180]	; (80008fc <menuUpdate+0x2b4>)
 8000846:	f000 f8bd 	bl	80009c4 <uartSendString>
		  uartReceiveString(&dataReceive,1,500);
 800084a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800084e:	2101      	movs	r1, #1
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <menuUpdate+0x27c>)
 8000852:	f000 f8db 	bl	8000a0c <uartReceiveString>
		 	if(Intro==dataReceive)
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <menuUpdate+0x27c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b0d      	cmp	r3, #13
 800085c:	d102      	bne.n	8000864 <menuUpdate+0x21c>
		 	  {menuState=TURN_SERVO;}
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <menuUpdate+0x274>)
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]
		 	if(Esc==dataReceive)
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <menuUpdate+0x27c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b1b      	cmp	r3, #27
 800086a:	d120      	bne.n	80008ae <menuUpdate+0x266>
		 	  { dataGrade[0]=0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <menuUpdate+0x288>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		 	    dataGrade[1]=0;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <menuUpdate+0x288>)
 8000874:	2200      	movs	r2, #0
 8000876:	705a      	strb	r2, [r3, #1]
		 	    menuState=READ_NUMBER_STEP;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <menuUpdate+0x274>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
		 	  }
		}
	break;
 800087e:	e016      	b.n	80008ae <menuUpdate+0x266>
	case STATUS_CHARACTER_INCORRECT :
	{
		uartSendString(Message_2,sizeof(Message_2)/sizeof(char));
 8000880:	212c      	movs	r1, #44	; 0x2c
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <menuUpdate+0x294>)
 8000884:	f000 f89e 	bl	80009c4 <uartSendString>

		if(delayRead(&delay))
 8000888:	481b      	ldr	r0, [pc, #108]	; (80008f8 <menuUpdate+0x2b0>)
 800088a:	f7ff fe8e 	bl	80005aa <delayRead>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00e      	beq.n	80008b2 <menuUpdate+0x26a>
		{menuState=READ_FIRST_C;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <menuUpdate+0x274>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		uartSendString(Message_Clear,sizeof(Message_Clear)/sizeof(char));
 800089a:	2106      	movs	r1, #6
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <menuUpdate+0x2a0>)
 800089e:	f000 f891 	bl	80009c4 <uartSendString>
		}
	}
	break;
 80008a2:	e006      	b.n	80008b2 <menuUpdate+0x26a>
	default:
		menuInit();
 80008a4:	f7ff feb2 	bl	800060c <menuInit>
	 }
}
 80008a8:	e004      	b.n	80008b4 <menuUpdate+0x26c>
	break;
 80008aa:	bf00      	nop
 80008ac:	e002      	b.n	80008b4 <menuUpdate+0x26c>
	break;
 80008ae:	bf00      	nop
 80008b0:	e000      	b.n	80008b4 <menuUpdate+0x26c>
	break;
 80008b2:	bf00      	nop
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000cd 	.word	0x200000cd
 80008c0:	08003df8 	.word	0x08003df8
 80008c4:	200000b4 	.word	0x200000b4
 80008c8:	200000bb 	.word	0x200000bb
 80008cc:	08003e18 	.word	0x08003e18
 80008d0:	200000b8 	.word	0x200000b8
 80008d4:	20000000 	.word	0x20000000
 80008d8:	200000ba 	.word	0x200000ba
 80008dc:	08003e58 	.word	0x08003e58
 80008e0:	08003e84 	.word	0x08003e84
 80008e4:	08003eac 	.word	0x08003eac
 80008e8:	08003eb0 	.word	0x08003eb0
 80008ec:	200000bc 	.word	0x200000bc
 80008f0:	b60b60b7 	.word	0xb60b60b7
 80008f4:	08003eb8 	.word	0x08003eb8
 80008f8:	2000009c 	.word	0x2000009c
 80008fc:	08003ecc 	.word	0x08003ecc

08000900 <CharToInt>:

static uint16_t CharToInt(uint8_t *data)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return atoi(data);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f002 fd77 	bl	80033fc <atoi>
 800090e:	4603      	mov	r3, r0
 8000910:	b29b      	uxth	r3, r3
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <uartInit>:
#include "stdbool.h"

UART_HandleTypeDef UartHandle;

bool_t uartInit()
{ char buffer[100];
 800091c:	b580      	push	{r7, lr}
 800091e:	b09a      	sub	sp, #104	; 0x68
 8000920:	af00      	add	r7, sp, #0
  // inicialización buffer de caracteres//
  uint8_t i;
  for(i=0;i<sizeof(buffer);i++)
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000928:	e00c      	b.n	8000944 <uartInit+0x28>
  	  	  {buffer[i]=NULL;}
 800092a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800092e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000932:	4413      	add	r3, r2
 8000934:	2200      	movs	r2, #0
 8000936:	f803 2c68 	strb.w	r2, [r3, #-104]
  for(i=0;i<sizeof(buffer);i++)
 800093a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800093e:	3301      	adds	r3, #1
 8000940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000948:	2b63      	cmp	r3, #99	; 0x63
 800094a:	d9ee      	bls.n	800092a <uartInit+0xe>
  // FIN inicialización buffer de caracteres//

  UartHandle.Instance        = USARTx;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <uartInit+0x9c>)
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <uartInit+0xa0>)
 8000950:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <uartInit+0x9c>)
 8000954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000958:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <uartInit+0x9c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <uartInit+0x9c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <uartInit+0x9c>)
 8000968:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800096c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <uartInit+0x9c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <uartInit+0x9c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <uartInit+0x9c>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <uartInit+0x9c>)
 8000982:	f002 f983 	bl	8002c8c <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <uartInit+0x74>
  {
    /* Initialization Error */
	  return false;
 800098c:	2300      	movs	r3, #0
 800098e:	e00e      	b.n	80009ae <uartInit+0x92>
  }
  else{ sprintf(buffer,"\n\rvelocidad de transmision %ld,8 bits de palabras, %ld bits de stop\n\r",UartHandle.Init.BaudRate,UART_STOPBITS_1);
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <uartInit+0x9c>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	4638      	mov	r0, r7
 8000996:	2300      	movs	r3, #0
 8000998:	4909      	ldr	r1, [pc, #36]	; (80009c0 <uartInit+0xa4>)
 800099a:	f002 fd65 	bl	8003468 <siprintf>
        HAL_UART_Transmit(&UartHandle,buffer,sizeof(buffer)/sizeof(char),0xFFFF);
 800099e:	4639      	mov	r1, r7
 80009a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a4:	2264      	movs	r2, #100	; 0x64
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <uartInit+0x9c>)
 80009a8:	f002 f9bd 	bl	8002d26 <HAL_UART_Transmit>
	    return true;
 80009ac:	2301      	movs	r3, #1
      }
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3768      	adds	r7, #104	; 0x68
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	40004800 	.word	0x40004800
 80009c0:	08003f04 	.word	0x08003f04

080009c4 <uartSendString>:

void uartSendString(uint8_t *pstring,uint16_t size)
{  uint8_t index, count=0;
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	807b      	strh	r3, [r7, #2]
 80009d0:	2300      	movs	r3, #0
 80009d2:	73bb      	strb	r3, [r7, #14]
for(index=0;*(pstring + index)!=0; index ++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e005      	b.n	80009e6 <uartSendString+0x22>
{count++;}
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	3301      	adds	r3, #1
 80009de:	73bb      	strb	r3, [r7, #14]
for(index=0;*(pstring + index)!=0; index ++)
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f3      	bne.n	80009da <uartSendString+0x16>

	HAL_UART_Transmit(&UartHandle,pstring,size,0xFFFF);
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <uartSendString+0x44>)
 80009fc:	f002 f993 	bl	8002d26 <HAL_UART_Transmit>

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000d0 	.word	0x200000d0

08000a0c <uartReceiveString>:
uint8_t uartReceiveString(uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	460b      	mov	r3, r1
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	817b      	strh	r3, [r7, #10]

if(HAL_UART_Receive(&UartHandle,pData, Size,Timeout)==0)
 8000a1a:	897a      	ldrh	r2, [r7, #10]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <uartReceiveString+0x2c>)
 8000a22:	f002 fa12 	bl	8002e4a <HAL_UART_Receive>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <uartReceiveString+0x24>
	  {
	    return 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e7ff      	b.n	8000a30 <uartReceiveString+0x24>
	  }

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d0 	.word	0x200000d0

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 faf1 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f837 	bl	8000ab8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uartInit();
 8000a4a:	f7ff ff67 	bl	800091c <uartInit>

  /*Init MEF*/
  menuInit();
 8000a4e:	f7ff fddd 	bl	800060c <menuInit>
  /* Initialize BSP Led for LED's */
  BSP_LED_Init(LED1);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fa0c 	bl	8000e70 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fa09 	bl	8000e70 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f000 fa06 	bl	8000e70 <BSP_LED_Init>

  /*Declaration of delay*/
  delay_t delay_Receive;
  tick_t delay_R=100;
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	60fb      	str	r3, [r7, #12]
  delayInit(&delay_Receive,delay_R );
 8000a68:	463b      	mov	r3, r7
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd8b 	bl	8000588 <delayInit>
  /* USER CODE BEGIN WHILE */
//  TimerPeriod.Pulse=10000;
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_LED_Toggle(LED1);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fa4c 	bl	8000f10 <BSP_LED_Toggle>
	  	if(delayRead(&delay_Receive))
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd95 	bl	80005aa <delayRead>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f5      	beq.n	8000a72 <main+0x36>
	  		{
	  		menuUpdate(&Angle);
 8000a86:	4802      	ldr	r0, [pc, #8]	; (8000a90 <main+0x54>)
 8000a88:	f7ff fdde 	bl	8000648 <menuUpdate>
	  BSP_LED_Toggle(LED1);
 8000a8c:	e7f1      	b.n	8000a72 <main+0x36>
 8000a8e:	bf00      	nop
 8000a90:	20000002 	.word	0x20000002

08000a94 <PWM_START>:
  }
  /* USER CODE END 3 */
}

void PWM_START()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
      MX_TIM2_Init(Angle);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <PWM_START+0x1c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f875 	bl	8000b8c <MX_TIM2_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <PWM_START+0x20>)
 8000aa6:	f001 fb13 	bl	80020d0 <HAL_TIM_PWM_Start>
	  /* USER CODE END 2 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000002 	.word	0x20000002
 8000ab4:	20000114 	.word	0x20000114

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fcc6 	bl	8003458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b2c:	23a8      	movs	r3, #168	; 0xa8
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b34:	2307      	movs	r3, #7
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fdab 	bl	8001698 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b48:	f000 f89a 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2105      	movs	r1, #5
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f80c 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b76:	f000 f883 	bl	8000c80 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_TIM2_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM2_Init(uint16_t duty)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b090      	sub	sp, #64	; 0x40
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000bcc:	227f      	movs	r2, #127	; 0x7f
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13130;
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000bd8:	f243 324a 	movw	r2, #13130	; 0x334a
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000bec:	f001 f9c8 	bl	8001f80 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 f843 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c04:	4619      	mov	r1, r3
 8000c06:	481d      	ldr	r0, [pc, #116]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000c08:	f001 fbec 	bl	80023e4 <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c12:	f000 f835 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c16:	4819      	ldr	r0, [pc, #100]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000c18:	f001 fa01 	bl	800201e <HAL_TIM_PWM_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 f82d 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000c36:	f001 ffad 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c40:	f000 f81e 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c44:	2360      	movs	r3, #96	; 0x60
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = duty;
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000c5e:	f001 faff 	bl	8002260 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000c68:	f000 f80a 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MX_TIM2_Init+0xf0>)
 8000c6e:	f000 f855 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	; 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000114 	.word	0x20000114

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	d11d      	bne.n	8000d7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_TIM_MspPostInit+0x68>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <HAL_TIM_MspPostInit+0x6c>)
 8000d76:	f000 faaf 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0x8c>)
 8000e04:	f000 fa68 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f930 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10e      	bne.n	8000e9e <BSP_LED_Init+0x2e>
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <BSP_LED_Init+0x94>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <BSP_LED_Init+0x94>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <BSP_LED_Init+0x94>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	e00d      	b.n	8000eba <BSP_LED_Init+0x4a>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <BSP_LED_Init+0x94>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <BSP_LED_Init+0x94>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <BSP_LED_Init+0x94>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <BSP_LED_Init+0x98>)
 8000ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <BSP_LED_Init+0x9c>)
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	f107 0214 	add.w	r2, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f9fa 	bl	80012d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <BSP_LED_Init+0x9c>)
 8000ee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <BSP_LED_Init+0x98>)
 8000ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f000 fb9a 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	08003f4c 	.word	0x08003f4c
 8000f0c:	20000004 	.word	0x20000004

08000f10 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <BSP_LED_Toggle+0x2c>)
 8000f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4906      	ldr	r1, [pc, #24]	; (8000f40 <BSP_LED_Toggle+0x30>)
 8000f26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	f000 fb98 	bl	8001662 <HAL_GPIO_TogglePin>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	08003f4c 	.word	0x08003f4c

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f002 fa46 	bl	8003404 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20030000 	.word	0x20030000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	20000170 	.word	0x20000170

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff0:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffe:	f7ff ffd7 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f002 fa05 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fd19 	bl	8000a3c <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800100c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001018:	080040b0 	.word	0x080040b0
  ldr r2, =_sbss
 800101c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001020:	20000170 	.word	0x20000170

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f90d 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe16 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f917 	bl	80012be <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	f000 f8ed 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000010 	.word	0x20000010
 80010c4:	20000018 	.word	0x20000018
 80010c8:	20000014 	.word	0x20000014

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000018 	.word	0x20000018
 80010f0:	2000015c 	.word	0x2000015c

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000015c 	.word	0x2000015c

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff47 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff5c 	bl	8001154 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffb0 	bl	800122c <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e177      	b.n	80015e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8166 	bne.w	80015de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80c0 	beq.w	80015de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a61      	ldr	r2, [pc, #388]	; (8001600 <HAL_GPIO_Init+0x328>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d037      	beq.n	8001516 <HAL_GPIO_Init+0x23e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d031      	beq.n	8001512 <HAL_GPIO_Init+0x23a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x334>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x236>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x338>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x232>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x33c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x22e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x340>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x22a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x344>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x34c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x350>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014ee:	2309      	movs	r3, #9
 80014f0:	e012      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f2:	230a      	movs	r3, #10
 80014f4:	e010      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00e      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fe:	2306      	movs	r3, #6
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x328>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_GPIO_Init+0x354>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_GPIO_Init+0x354>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_GPIO_Init+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <HAL_GPIO_Init+0x354>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_GPIO_Init+0x354>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <HAL_GPIO_Init+0x354>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_GPIO_Init+0x354>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_GPIO_Init+0x354>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f ae84 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40021400 	.word	0x40021400
 800161c:	40021800 	.word	0x40021800
 8001620:	40021c00 	.word	0x40021c00
 8001624:	40022000 	.word	0x40022000
 8001628:	40022400 	.word	0x40022400
 800162c:	40013c00 	.word	0x40013c00

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43d9      	mvns	r1, r3
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	400b      	ands	r3, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e264      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	4ba3      	ldr	r3, [pc, #652]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b9d      	ldr	r3, [pc, #628]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e23f      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b91      	ldr	r3, [pc, #580]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a90      	ldr	r2, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a8a      	ldr	r2, [pc, #552]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a87      	ldr	r2, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b84      	ldr	r3, [pc, #528]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a80      	ldr	r2, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fcd0 	bl	80010f4 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fccc 	bl	80010f4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e204      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fcbc 	bl	80010f4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcb8 	bl	80010f4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1f0      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b62      	ldr	r3, [pc, #392]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c4      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4952      	ldr	r1, [pc, #328]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_RCC_OscConfig+0x2b0>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fc71 	bl	80010f4 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc6d 	bl	80010f4 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a5      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4940      	ldr	r1, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x2b0>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fc50 	bl	80010f4 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc4c 	bl	80010f4 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e184      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d030      	beq.n	80018e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_RCC_OscConfig+0x2b4>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fc30 	bl	80010f4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc2c 	bl	80010f4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e164      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
 80018b6:	e015      	b.n	80018e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x2b4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fc19 	bl	80010f4 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc15 	bl	80010f4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e14d      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a0 	beq.w	8001a32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_OscConfig+0x2b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d121      	bne.n	8001972 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_RCC_OscConfig+0x2b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_RCC_OscConfig+0x2b8>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fbdb 	bl	80010f4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e011      	b.n	8001966 <HAL_RCC_OscConfig+0x2ce>
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
 8001950:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001954:	f7ff fbce 	bl	80010f4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e106      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b85      	ldr	r3, [pc, #532]	; (8001b7c <HAL_RCC_OscConfig+0x4e4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x2f0>
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a80      	ldr	r2, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
 8001986:	e01c      	b.n	80019c2 <HAL_RCC_OscConfig+0x32a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d10c      	bne.n	80019aa <HAL_RCC_OscConfig+0x312>
 8001990:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	e00b      	b.n	80019c2 <HAL_RCC_OscConfig+0x32a>
 80019aa:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a74      	ldr	r2, [pc, #464]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d015      	beq.n	80019f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb93 	bl	80010f4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff fb8f 	bl	80010f4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0c5      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ee      	beq.n	80019d2 <HAL_RCC_OscConfig+0x33a>
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb7d 	bl	80010f4 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb79 	bl	80010f4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0af      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a14:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ee      	bne.n	80019fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d105      	bne.n	8001a32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a26:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 809b 	beq.w	8001b72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d05c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d141      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a50:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff fb4d 	bl	80010f4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff fb49 	bl	80010f4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e081      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a70:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	019b      	lsls	r3, r3, #6
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	3b01      	subs	r3, #1
 8001a96:	041b      	lsls	r3, r3, #16
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	4937      	ldr	r1, [pc, #220]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb22 	bl	80010f4 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fb1e 	bl	80010f4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e056      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
 8001ad2:	e04e      	b.n	8001b72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fb0b 	bl	80010f4 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fb07 	bl	80010f4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e03f      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x44a>
 8001b00:	e037      	b.n	8001b72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e032      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x4e8>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d028      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d121      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d11a      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d111      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	3b01      	subs	r3, #1
 8001b58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	42470060 	.word	0x42470060

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cc      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d90c      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d044      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e067      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa3c 	bl	80010f4 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa38 	bl	80010f4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f99c 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08003f54 	.word	0x08003f54
 8001d4c:	20000010 	.word	0x20000010
 8001d50:	20000014 	.word	0x20000014

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	f200 80bd 	bhi.w	8001ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x34>
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d86:	e0b7      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d8a:	60bb      	str	r3, [r7, #8]
       break;
 8001d8c:	e0b7      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d90:	60bb      	str	r3, [r7, #8]
      break;
 8001d92:	e0b4      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d04d      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	461a      	mov	r2, r3
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	ea02 0800 	and.w	r8, r2, r0
 8001dc2:	ea03 0901 	and.w	r9, r3, r1
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	4649      	mov	r1, r9
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	014b      	lsls	r3, r1, #5
 8001dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dd8:	0142      	lsls	r2, r0, #5
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	ebb0 0008 	subs.w	r0, r0, r8
 8001de2:	eb61 0109 	sbc.w	r1, r1, r9
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	018b      	lsls	r3, r1, #6
 8001df0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001df4:	0182      	lsls	r2, r0, #6
 8001df6:	1a12      	subs	r2, r2, r0
 8001df8:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	00d9      	lsls	r1, r3, #3
 8001e06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e0a:	00d0      	lsls	r0, r2, #3
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	eb12 0208 	adds.w	r2, r2, r8
 8001e14:	eb43 0309 	adc.w	r3, r3, r9
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	0259      	lsls	r1, r3, #9
 8001e22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e26:	0250      	lsls	r0, r2, #9
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	f7fe fa2a 	bl	8000290 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e04a      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	ea02 0400 	and.w	r4, r2, r0
 8001e5e:	ea03 0501 	and.w	r5, r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	014b      	lsls	r3, r1, #5
 8001e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e74:	0142      	lsls	r2, r0, #5
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	1b00      	subs	r0, r0, r4
 8001e7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	018b      	lsls	r3, r1, #6
 8001e8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e8e:	0182      	lsls	r2, r0, #6
 8001e90:	1a12      	subs	r2, r2, r0
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	00d9      	lsls	r1, r3, #3
 8001ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ea4:	00d0      	lsls	r0, r2, #3
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	1912      	adds	r2, r2, r4
 8001eac:	eb45 0303 	adc.w	r3, r5, r3
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	0299      	lsls	r1, r3, #10
 8001eba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ebe:	0290      	lsls	r0, r2, #10
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f7fe f9de 	bl	8000290 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	60bb      	str	r3, [r7, #8]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001efa:	60bb      	str	r3, [r7, #8]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	68bb      	ldr	r3, [r7, #8]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000010 	.word	0x20000010

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff0 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4903      	ldr	r1, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08003f64 	.word	0x08003f64

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f5c:	f7ff ffdc 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08003f64 	.word	0x08003f64

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fe98 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fad8 	bl	8002574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e041      	b.n	80020b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f839 	bl	80020bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f000 fa89 	bl	8002574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_TIM_PWM_Start+0x24>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e022      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d109      	bne.n	800210e <HAL_TIM_PWM_Start+0x3e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e015      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d109      	bne.n	8002128 <HAL_TIM_PWM_Start+0x58>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e008      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07c      	b.n	800223c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Start+0x82>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002150:	e013      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Start+0x92>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002160:	e00b      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Start+0xa2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002170:	e003      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fce0 	bl	8002b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <HAL_TIM_PWM_Start+0x174>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_PWM_Start+0xcc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <HAL_TIM_PWM_Start+0x178>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_PWM_Start+0xd0>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PWM_Start+0xd2>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_PWM_Start+0x174>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d022      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d01d      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_TIM_PWM_Start+0x17c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d018      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_TIM_PWM_Start+0x180>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_TIM_PWM_Start+0x184>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00e      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_TIM_PWM_Start+0x178>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_TIM_PWM_Start+0x188>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d004      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_TIM_PWM_Start+0x18c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d111      	bne.n	800222a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d010      	beq.n	800223a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	e007      	b.n	800223a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40010000 	.word	0x40010000
 8002248:	40010400 	.word	0x40010400
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40014000 	.word	0x40014000
 800225c:	40001800 	.word	0x40001800

08002260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800227a:	2302      	movs	r3, #2
 800227c:	e0ae      	b.n	80023dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	f200 809f 	bhi.w	80023cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022c9 	.word	0x080022c9
 8002298:	080023cd 	.word	0x080023cd
 800229c:	080023cd 	.word	0x080023cd
 80022a0:	080023cd 	.word	0x080023cd
 80022a4:	08002309 	.word	0x08002309
 80022a8:	080023cd 	.word	0x080023cd
 80022ac:	080023cd 	.word	0x080023cd
 80022b0:	080023cd 	.word	0x080023cd
 80022b4:	0800234b 	.word	0x0800234b
 80022b8:	080023cd 	.word	0x080023cd
 80022bc:	080023cd 	.word	0x080023cd
 80022c0:	080023cd 	.word	0x080023cd
 80022c4:	0800238b 	.word	0x0800238b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f9f0 	bl	80026b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0208 	orr.w	r2, r2, #8
 80022e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0204 	bic.w	r2, r2, #4
 80022f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6999      	ldr	r1, [r3, #24]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	619a      	str	r2, [r3, #24]
      break;
 8002306:	e064      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fa40 	bl	8002794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6999      	ldr	r1, [r3, #24]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	619a      	str	r2, [r3, #24]
      break;
 8002348:	e043      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fa95 	bl	8002880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0208 	orr.w	r2, r2, #8
 8002364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0204 	bic.w	r2, r2, #4
 8002374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69d9      	ldr	r1, [r3, #28]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
      break;
 8002388:	e023      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fae9 	bl	8002968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69d9      	ldr	r1, [r3, #28]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	021a      	lsls	r2, r3, #8
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	61da      	str	r2, [r3, #28]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	75fb      	strb	r3, [r7, #23]
      break;
 80023d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023da:	7dfb      	ldrb	r3, [r7, #23]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0b4      	b.n	800256a <HAL_TIM_ConfigClockSource+0x186>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d03e      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0xd4>
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	f200 8087 	bhi.w	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	f000 8086 	beq.w	8002556 <HAL_TIM_ConfigClockSource+0x172>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d87f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b70      	cmp	r3, #112	; 0x70
 8002452:	d01a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xa6>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d87b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b60      	cmp	r3, #96	; 0x60
 800245a:	d050      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x11a>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d877      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b50      	cmp	r3, #80	; 0x50
 8002462:	d03c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xfa>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d873      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d058      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x13a>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d86f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d064      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d86b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d060      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d867      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d05a      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002488:	e062      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f000 fb35 	bl	8002b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
      break;
 80024b6:	e04f      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f000 fb1e 	bl	8002b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024da:	609a      	str	r2, [r3, #8]
      break;
 80024dc:	e03c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 fa92 	bl	8002a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 faeb 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 80024fc:	e02c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 fab1 	bl	8002a72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2160      	movs	r1, #96	; 0x60
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fadb 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800251c:	e01c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 fa72 	bl	8002a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f000 facb 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800253c:	e00c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 fac2 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800254e:	e003      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e000      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a40      	ldr	r2, [pc, #256]	; (8002688 <TIM_Base_SetConfig+0x114>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d00f      	beq.n	80025b4 <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3d      	ldr	r2, [pc, #244]	; (800268c <TIM_Base_SetConfig+0x118>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00b      	beq.n	80025b4 <TIM_Base_SetConfig+0x40>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <TIM_Base_SetConfig+0x11c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0x40>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <TIM_Base_SetConfig+0x120>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x40>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <TIM_Base_SetConfig+0x124>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <TIM_Base_SetConfig+0x114>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02b      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d027      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2c      	ldr	r2, [pc, #176]	; (800268c <TIM_Base_SetConfig+0x118>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d023      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <TIM_Base_SetConfig+0x11c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <TIM_Base_SetConfig+0x120>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01b      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a29      	ldr	r2, [pc, #164]	; (8002698 <TIM_Base_SetConfig+0x124>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d017      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a28      	ldr	r2, [pc, #160]	; (800269c <TIM_Base_SetConfig+0x128>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <TIM_Base_SetConfig+0x12c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00f      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <TIM_Base_SetConfig+0x130>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00b      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <TIM_Base_SetConfig+0x134>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a24      	ldr	r2, [pc, #144]	; (80026ac <TIM_Base_SetConfig+0x138>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <TIM_Base_SetConfig+0x13c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d108      	bne.n	8002638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <TIM_Base_SetConfig+0x114>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_Base_SetConfig+0xf8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <TIM_Base_SetConfig+0x124>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800
 8002694:	40000c00 	.word	0x40000c00
 8002698:	40010400 	.word	0x40010400
 800269c:	40014000 	.word	0x40014000
 80026a0:	40014400 	.word	0x40014400
 80026a4:	40014800 	.word	0x40014800
 80026a8:	40001800 	.word	0x40001800
 80026ac:	40001c00 	.word	0x40001c00
 80026b0:	40002000 	.word	0x40002000

080026b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f023 0201 	bic.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 0302 	bic.w	r3, r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <TIM_OC1_SetConfig+0xd8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_OC1_SetConfig+0x64>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <TIM_OC1_SetConfig+0xdc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10c      	bne.n	8002732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0308 	bic.w	r3, r3, #8
 800271e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <TIM_OC1_SetConfig+0xd8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_OC1_SetConfig+0x8e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <TIM_OC1_SetConfig+0xdc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40010000 	.word	0x40010000
 8002790:	40010400 	.word	0x40010400

08002794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0210 	bic.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0320 	bic.w	r3, r3, #32
 80027de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a22      	ldr	r2, [pc, #136]	; (8002878 <TIM_OC2_SetConfig+0xe4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <TIM_OC2_SetConfig+0x68>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a21      	ldr	r2, [pc, #132]	; (800287c <TIM_OC2_SetConfig+0xe8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10d      	bne.n	8002818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <TIM_OC2_SetConfig+0xe4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_OC2_SetConfig+0x94>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <TIM_OC2_SetConfig+0xe8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d113      	bne.n	8002850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800282e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40010400 	.word	0x40010400

08002880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <TIM_OC3_SetConfig+0xe0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d003      	beq.n	80028e6 <TIM_OC3_SetConfig+0x66>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a20      	ldr	r2, [pc, #128]	; (8002964 <TIM_OC3_SetConfig+0xe4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10d      	bne.n	8002902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <TIM_OC3_SetConfig+0xe0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_OC3_SetConfig+0x92>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <TIM_OC3_SetConfig+0xe4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40010000 	.word	0x40010000
 8002964:	40010400 	.word	0x40010400

08002968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	031b      	lsls	r3, r3, #12
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <TIM_OC4_SetConfig+0xa4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_OC4_SetConfig+0x68>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <TIM_OC4_SetConfig+0xa8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d109      	bne.n	80029e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	621a      	str	r2, [r3, #32]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40010400 	.word	0x40010400

08002a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 030a 	bic.w	r3, r3, #10
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f043 0307 	orr.w	r3, r3, #7
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e05a      	b.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d01d      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40001800 	.word	0x40001800

08002c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e03f      	b.n	8002d1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f86a 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f9cb 	bl	800306c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b08a      	sub	sp, #40	; 0x28
 8002d2a:	af02      	add	r7, sp, #8
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d17c      	bne.n	8002e40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_UART_Transmit+0x2c>
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e075      	b.n	8002e42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_UART_Transmit+0x3e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e06e      	b.n	8002e42 <HAL_UART_Transmit+0x11c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe f9bb 	bl	80010f4 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d94:	d108      	bne.n	8002da8 <HAL_UART_Transmit+0x82>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e003      	b.n	8002db0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002db8:	e02a      	b.n	8002e10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f8e2 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e036      	b.n	8002e42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3302      	adds	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e007      	b.n	8002e02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1cf      	bne.n	8002dba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f8b2 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e006      	b.n	8002e42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	; 0x28
 8002e4e:	af02      	add	r7, sp, #8
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	f040 808c 	bne.w	8002f84 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_UART_Receive+0x2e>
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e084      	b.n	8002f86 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Receive+0x40>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e07d      	b.n	8002f86 <HAL_UART_Receive+0x13c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2222      	movs	r2, #34	; 0x22
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe f925 	bl	80010f4 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec0:	d108      	bne.n	8002ed4 <HAL_UART_Receive+0x8a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e003      	b.n	8002edc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ee4:	e043      	b.n	8002f6e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2120      	movs	r1, #32
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f84c 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e042      	b.n	8002f86 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e01f      	b.n	8002f60 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d007      	beq.n	8002f3a <HAL_UART_Receive+0xf0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_UART_Receive+0xfe>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e008      	b.n	8002f5a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1b6      	bne.n	8002ee6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b090      	sub	sp, #64	; 0x40
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	e050      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa6:	d04c      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8002fae:	f7fe f8a1 	bl	80010f4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d241      	bcs.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fde:	637a      	str	r2, [r7, #52]	; 0x34
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e5      	bne.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	613b      	str	r3, [r7, #16]
   return(result);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3314      	adds	r3, #20
 8003010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003012:	623a      	str	r2, [r7, #32]
 8003014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	69f9      	ldr	r1, [r7, #28]
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e5      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e00f      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d09f      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3740      	adds	r7, #64	; 0x40
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	b09f      	sub	sp, #124	; 0x7c
 8003072:	af00      	add	r7, sp, #0
 8003074:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	431a      	orrs	r2, r3
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030b0:	f021 010c 	bic.w	r1, r1, #12
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	6999      	ldr	r1, [r3, #24]
 80030cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	ea40 0301 	orr.w	r3, r0, r1
 80030d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4bc5      	ldr	r3, [pc, #788]	; (80033f0 <UART_SetConfig+0x384>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d004      	beq.n	80030ea <UART_SetConfig+0x7e>
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4bc3      	ldr	r3, [pc, #780]	; (80033f4 <UART_SetConfig+0x388>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d103      	bne.n	80030f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ea:	f7fe ff35 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 80030ee:	6778      	str	r0, [r7, #116]	; 0x74
 80030f0:	e002      	b.n	80030f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f2:	f7fe ff1d 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 80030f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	f040 80b6 	bne.w	8003270 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	461c      	mov	r4, r3
 8003108:	f04f 0500 	mov.w	r5, #0
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	1891      	adds	r1, r2, r2
 8003112:	6439      	str	r1, [r7, #64]	; 0x40
 8003114:	415b      	adcs	r3, r3
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800311c:	1912      	adds	r2, r2, r4
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	00d9      	lsls	r1, r3, #3
 800312c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003130:	00d0      	lsls	r0, r2, #3
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	1911      	adds	r1, r2, r4
 8003138:	6639      	str	r1, [r7, #96]	; 0x60
 800313a:	416b      	adcs	r3, r5
 800313c:	667b      	str	r3, [r7, #100]	; 0x64
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	1891      	adds	r1, r2, r2
 800314a:	63b9      	str	r1, [r7, #56]	; 0x38
 800314c:	415b      	adcs	r3, r3
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003154:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003158:	f7fd f89a 	bl	8000290 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4ba5      	ldr	r3, [pc, #660]	; (80033f8 <UART_SetConfig+0x38c>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011e      	lsls	r6, r3, #4
 800316a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316c:	461c      	mov	r4, r3
 800316e:	f04f 0500 	mov.w	r5, #0
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	1891      	adds	r1, r2, r2
 8003178:	6339      	str	r1, [r7, #48]	; 0x30
 800317a:	415b      	adcs	r3, r3
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
 800317e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003182:	1912      	adds	r2, r2, r4
 8003184:	eb45 0303 	adc.w	r3, r5, r3
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	00d9      	lsls	r1, r3, #3
 8003192:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003196:	00d0      	lsls	r0, r2, #3
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	1911      	adds	r1, r2, r4
 800319e:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a0:	416b      	adcs	r3, r5
 80031a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031b2:	415b      	adcs	r3, r3
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031be:	f7fd f867 	bl	8000290 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <UART_SetConfig+0x38c>)
 80031c8:	fba3 1302 	umull	r1, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	2164      	movs	r1, #100	; 0x64
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	3332      	adds	r3, #50	; 0x32
 80031da:	4a87      	ldr	r2, [pc, #540]	; (80033f8 <UART_SetConfig+0x38c>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e8:	441e      	add	r6, r3
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	4618      	mov	r0, r3
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	1894      	adds	r4, r2, r2
 80031f8:	623c      	str	r4, [r7, #32]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	1812      	adds	r2, r2, r0
 8003204:	eb41 0303 	adc.w	r3, r1, r3
 8003208:	f04f 0400 	mov.w	r4, #0
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	00dd      	lsls	r5, r3, #3
 8003212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003216:	00d4      	lsls	r4, r2, #3
 8003218:	4622      	mov	r2, r4
 800321a:	462b      	mov	r3, r5
 800321c:	1814      	adds	r4, r2, r0
 800321e:	653c      	str	r4, [r7, #80]	; 0x50
 8003220:	414b      	adcs	r3, r1
 8003222:	657b      	str	r3, [r7, #84]	; 0x54
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	461a      	mov	r2, r3
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	1891      	adds	r1, r2, r2
 8003230:	61b9      	str	r1, [r7, #24]
 8003232:	415b      	adcs	r3, r3
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800323e:	f7fd f827 	bl	8000290 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <UART_SetConfig+0x38c>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <UART_SetConfig+0x38c>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4432      	add	r2, r6
 800326c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800326e:	e0b9      	b.n	80033e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	461c      	mov	r4, r3
 8003274:	f04f 0500 	mov.w	r5, #0
 8003278:	4622      	mov	r2, r4
 800327a:	462b      	mov	r3, r5
 800327c:	1891      	adds	r1, r2, r2
 800327e:	6139      	str	r1, [r7, #16]
 8003280:	415b      	adcs	r3, r3
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003288:	1912      	adds	r2, r2, r4
 800328a:	eb45 0303 	adc.w	r3, r5, r3
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800329c:	00d0      	lsls	r0, r2, #3
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	eb12 0804 	adds.w	r8, r2, r4
 80032a6:	eb43 0905 	adc.w	r9, r3, r5
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032c2:	0082      	lsls	r2, r0, #2
 80032c4:	4640      	mov	r0, r8
 80032c6:	4649      	mov	r1, r9
 80032c8:	f7fc ffe2 	bl	8000290 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <UART_SetConfig+0x38c>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011e      	lsls	r6, r3, #4
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	4618      	mov	r0, r3
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1894      	adds	r4, r2, r2
 80032e8:	60bc      	str	r4, [r7, #8]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f2:	1812      	adds	r2, r2, r0
 80032f4:	eb41 0303 	adc.w	r3, r1, r3
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	f04f 0500 	mov.w	r5, #0
 8003300:	00dd      	lsls	r5, r3, #3
 8003302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003306:	00d4      	lsls	r4, r2, #3
 8003308:	4622      	mov	r2, r4
 800330a:	462b      	mov	r3, r5
 800330c:	1814      	adds	r4, r2, r0
 800330e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003310:	414b      	adcs	r3, r1
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800332c:	0082      	lsls	r2, r0, #2
 800332e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003332:	f7fc ffad 	bl	8000290 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <UART_SetConfig+0x38c>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	3332      	adds	r3, #50	; 0x32
 800334e:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <UART_SetConfig+0x38c>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335a:	441e      	add	r6, r3
 800335c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335e:	4618      	mov	r0, r3
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	1894      	adds	r4, r2, r2
 800336a:	603c      	str	r4, [r7, #0]
 800336c:	415b      	adcs	r3, r3
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003374:	1812      	adds	r2, r2, r0
 8003376:	eb41 0303 	adc.w	r3, r1, r3
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	f04f 0500 	mov.w	r5, #0
 8003382:	00dd      	lsls	r5, r3, #3
 8003384:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003388:	00d4      	lsls	r4, r2, #3
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	eb12 0a00 	adds.w	sl, r2, r0
 8003392:	eb43 0b01 	adc.w	fp, r3, r1
 8003396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4618      	mov	r0, r3
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	008b      	lsls	r3, r1, #2
 80033aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ae:	0082      	lsls	r2, r0, #2
 80033b0:	4650      	mov	r0, sl
 80033b2:	4659      	mov	r1, fp
 80033b4:	f7fc ff6c 	bl	8000290 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <UART_SetConfig+0x38c>)
 80033be:	fba3 1302 	umull	r1, r3, r3, r2
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2164      	movs	r1, #100	; 0x64
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	; 0x32
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <UART_SetConfig+0x38c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4432      	add	r2, r6
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	377c      	adds	r7, #124	; 0x7c
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f

080033fc <atoi>:
 80033fc:	220a      	movs	r2, #10
 80033fe:	2100      	movs	r1, #0
 8003400:	f000 b8d6 	b.w	80035b0 <strtol>

08003404 <__errno>:
 8003404:	4b01      	ldr	r3, [pc, #4]	; (800340c <__errno+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000001c 	.word	0x2000001c

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	4d0d      	ldr	r5, [pc, #52]	; (8003448 <__libc_init_array+0x38>)
 8003414:	4c0d      	ldr	r4, [pc, #52]	; (800344c <__libc_init_array+0x3c>)
 8003416:	1b64      	subs	r4, r4, r5
 8003418:	10a4      	asrs	r4, r4, #2
 800341a:	2600      	movs	r6, #0
 800341c:	42a6      	cmp	r6, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	4d0b      	ldr	r5, [pc, #44]	; (8003450 <__libc_init_array+0x40>)
 8003422:	4c0c      	ldr	r4, [pc, #48]	; (8003454 <__libc_init_array+0x44>)
 8003424:	f000 fcdc 	bl	8003de0 <_init>
 8003428:	1b64      	subs	r4, r4, r5
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	2600      	movs	r6, #0
 800342e:	42a6      	cmp	r6, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	f855 3b04 	ldr.w	r3, [r5], #4
 8003438:	4798      	blx	r3
 800343a:	3601      	adds	r6, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003442:	4798      	blx	r3
 8003444:	3601      	adds	r6, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	080040a8 	.word	0x080040a8
 800344c:	080040a8 	.word	0x080040a8
 8003450:	080040a8 	.word	0x080040a8
 8003454:	080040ac 	.word	0x080040ac

08003458 <memset>:
 8003458:	4402      	add	r2, r0
 800345a:	4603      	mov	r3, r0
 800345c:	4293      	cmp	r3, r2
 800345e:	d100      	bne.n	8003462 <memset+0xa>
 8003460:	4770      	bx	lr
 8003462:	f803 1b01 	strb.w	r1, [r3], #1
 8003466:	e7f9      	b.n	800345c <memset+0x4>

08003468 <siprintf>:
 8003468:	b40e      	push	{r1, r2, r3}
 800346a:	b500      	push	{lr}
 800346c:	b09c      	sub	sp, #112	; 0x70
 800346e:	ab1d      	add	r3, sp, #116	; 0x74
 8003470:	9002      	str	r0, [sp, #8]
 8003472:	9006      	str	r0, [sp, #24]
 8003474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003478:	4809      	ldr	r0, [pc, #36]	; (80034a0 <siprintf+0x38>)
 800347a:	9107      	str	r1, [sp, #28]
 800347c:	9104      	str	r1, [sp, #16]
 800347e:	4909      	ldr	r1, [pc, #36]	; (80034a4 <siprintf+0x3c>)
 8003480:	f853 2b04 	ldr.w	r2, [r3], #4
 8003484:	9105      	str	r1, [sp, #20]
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	a902      	add	r1, sp, #8
 800348c:	f000 f8f6 	bl	800367c <_svfiprintf_r>
 8003490:	9b02      	ldr	r3, [sp, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	b01c      	add	sp, #112	; 0x70
 8003498:	f85d eb04 	ldr.w	lr, [sp], #4
 800349c:	b003      	add	sp, #12
 800349e:	4770      	bx	lr
 80034a0:	2000001c 	.word	0x2000001c
 80034a4:	ffff0208 	.word	0xffff0208

080034a8 <_strtol_l.isra.0>:
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ae:	d001      	beq.n	80034b4 <_strtol_l.isra.0+0xc>
 80034b0:	2b24      	cmp	r3, #36	; 0x24
 80034b2:	d906      	bls.n	80034c2 <_strtol_l.isra.0+0x1a>
 80034b4:	f7ff ffa6 	bl	8003404 <__errno>
 80034b8:	2316      	movs	r3, #22
 80034ba:	6003      	str	r3, [r0, #0]
 80034bc:	2000      	movs	r0, #0
 80034be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c2:	4f3a      	ldr	r7, [pc, #232]	; (80035ac <_strtol_l.isra.0+0x104>)
 80034c4:	468e      	mov	lr, r1
 80034c6:	4676      	mov	r6, lr
 80034c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80034cc:	5de5      	ldrb	r5, [r4, r7]
 80034ce:	f015 0508 	ands.w	r5, r5, #8
 80034d2:	d1f8      	bne.n	80034c6 <_strtol_l.isra.0+0x1e>
 80034d4:	2c2d      	cmp	r4, #45	; 0x2d
 80034d6:	d134      	bne.n	8003542 <_strtol_l.isra.0+0x9a>
 80034d8:	f89e 4000 	ldrb.w	r4, [lr]
 80034dc:	f04f 0801 	mov.w	r8, #1
 80034e0:	f106 0e02 	add.w	lr, r6, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <_strtol_l.isra.0+0xfa>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d10c      	bne.n	8003506 <_strtol_l.isra.0+0x5e>
 80034ec:	2c30      	cmp	r4, #48	; 0x30
 80034ee:	d10a      	bne.n	8003506 <_strtol_l.isra.0+0x5e>
 80034f0:	f89e 4000 	ldrb.w	r4, [lr]
 80034f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80034f8:	2c58      	cmp	r4, #88	; 0x58
 80034fa:	d14d      	bne.n	8003598 <_strtol_l.isra.0+0xf0>
 80034fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003500:	2310      	movs	r3, #16
 8003502:	f10e 0e02 	add.w	lr, lr, #2
 8003506:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800350a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800350e:	2600      	movs	r6, #0
 8003510:	fbbc f9f3 	udiv	r9, ip, r3
 8003514:	4635      	mov	r5, r6
 8003516:	fb03 ca19 	mls	sl, r3, r9, ip
 800351a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800351e:	2f09      	cmp	r7, #9
 8003520:	d818      	bhi.n	8003554 <_strtol_l.isra.0+0xac>
 8003522:	463c      	mov	r4, r7
 8003524:	42a3      	cmp	r3, r4
 8003526:	dd24      	ble.n	8003572 <_strtol_l.isra.0+0xca>
 8003528:	2e00      	cmp	r6, #0
 800352a:	db1f      	blt.n	800356c <_strtol_l.isra.0+0xc4>
 800352c:	45a9      	cmp	r9, r5
 800352e:	d31d      	bcc.n	800356c <_strtol_l.isra.0+0xc4>
 8003530:	d101      	bne.n	8003536 <_strtol_l.isra.0+0x8e>
 8003532:	45a2      	cmp	sl, r4
 8003534:	db1a      	blt.n	800356c <_strtol_l.isra.0+0xc4>
 8003536:	fb05 4503 	mla	r5, r5, r3, r4
 800353a:	2601      	movs	r6, #1
 800353c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003540:	e7eb      	b.n	800351a <_strtol_l.isra.0+0x72>
 8003542:	2c2b      	cmp	r4, #43	; 0x2b
 8003544:	bf08      	it	eq
 8003546:	f89e 4000 	ldrbeq.w	r4, [lr]
 800354a:	46a8      	mov	r8, r5
 800354c:	bf08      	it	eq
 800354e:	f106 0e02 	addeq.w	lr, r6, #2
 8003552:	e7c7      	b.n	80034e4 <_strtol_l.isra.0+0x3c>
 8003554:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003558:	2f19      	cmp	r7, #25
 800355a:	d801      	bhi.n	8003560 <_strtol_l.isra.0+0xb8>
 800355c:	3c37      	subs	r4, #55	; 0x37
 800355e:	e7e1      	b.n	8003524 <_strtol_l.isra.0+0x7c>
 8003560:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003564:	2f19      	cmp	r7, #25
 8003566:	d804      	bhi.n	8003572 <_strtol_l.isra.0+0xca>
 8003568:	3c57      	subs	r4, #87	; 0x57
 800356a:	e7db      	b.n	8003524 <_strtol_l.isra.0+0x7c>
 800356c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003570:	e7e4      	b.n	800353c <_strtol_l.isra.0+0x94>
 8003572:	2e00      	cmp	r6, #0
 8003574:	da05      	bge.n	8003582 <_strtol_l.isra.0+0xda>
 8003576:	2322      	movs	r3, #34	; 0x22
 8003578:	6003      	str	r3, [r0, #0]
 800357a:	4665      	mov	r5, ip
 800357c:	b942      	cbnz	r2, 8003590 <_strtol_l.isra.0+0xe8>
 800357e:	4628      	mov	r0, r5
 8003580:	e79d      	b.n	80034be <_strtol_l.isra.0+0x16>
 8003582:	f1b8 0f00 	cmp.w	r8, #0
 8003586:	d000      	beq.n	800358a <_strtol_l.isra.0+0xe2>
 8003588:	426d      	negs	r5, r5
 800358a:	2a00      	cmp	r2, #0
 800358c:	d0f7      	beq.n	800357e <_strtol_l.isra.0+0xd6>
 800358e:	b10e      	cbz	r6, 8003594 <_strtol_l.isra.0+0xec>
 8003590:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8003594:	6011      	str	r1, [r2, #0]
 8003596:	e7f2      	b.n	800357e <_strtol_l.isra.0+0xd6>
 8003598:	2430      	movs	r4, #48	; 0x30
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1b3      	bne.n	8003506 <_strtol_l.isra.0+0x5e>
 800359e:	2308      	movs	r3, #8
 80035a0:	e7b1      	b.n	8003506 <_strtol_l.isra.0+0x5e>
 80035a2:	2c30      	cmp	r4, #48	; 0x30
 80035a4:	d0a4      	beq.n	80034f0 <_strtol_l.isra.0+0x48>
 80035a6:	230a      	movs	r3, #10
 80035a8:	e7ad      	b.n	8003506 <_strtol_l.isra.0+0x5e>
 80035aa:	bf00      	nop
 80035ac:	08003f6d 	.word	0x08003f6d

080035b0 <strtol>:
 80035b0:	4613      	mov	r3, r2
 80035b2:	460a      	mov	r2, r1
 80035b4:	4601      	mov	r1, r0
 80035b6:	4802      	ldr	r0, [pc, #8]	; (80035c0 <strtol+0x10>)
 80035b8:	6800      	ldr	r0, [r0, #0]
 80035ba:	f7ff bf75 	b.w	80034a8 <_strtol_l.isra.0>
 80035be:	bf00      	nop
 80035c0:	2000001c 	.word	0x2000001c

080035c4 <__ssputs_r>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	688e      	ldr	r6, [r1, #8]
 80035ca:	429e      	cmp	r6, r3
 80035cc:	4682      	mov	sl, r0
 80035ce:	460c      	mov	r4, r1
 80035d0:	4690      	mov	r8, r2
 80035d2:	461f      	mov	r7, r3
 80035d4:	d838      	bhi.n	8003648 <__ssputs_r+0x84>
 80035d6:	898a      	ldrh	r2, [r1, #12]
 80035d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035dc:	d032      	beq.n	8003644 <__ssputs_r+0x80>
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	6909      	ldr	r1, [r1, #16]
 80035e2:	eba5 0901 	sub.w	r9, r5, r1
 80035e6:	6965      	ldr	r5, [r4, #20]
 80035e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035f0:	3301      	adds	r3, #1
 80035f2:	444b      	add	r3, r9
 80035f4:	106d      	asrs	r5, r5, #1
 80035f6:	429d      	cmp	r5, r3
 80035f8:	bf38      	it	cc
 80035fa:	461d      	movcc	r5, r3
 80035fc:	0553      	lsls	r3, r2, #21
 80035fe:	d531      	bpl.n	8003664 <__ssputs_r+0xa0>
 8003600:	4629      	mov	r1, r5
 8003602:	f000 fb47 	bl	8003c94 <_malloc_r>
 8003606:	4606      	mov	r6, r0
 8003608:	b950      	cbnz	r0, 8003620 <__ssputs_r+0x5c>
 800360a:	230c      	movs	r3, #12
 800360c:	f8ca 3000 	str.w	r3, [sl]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003620:	6921      	ldr	r1, [r4, #16]
 8003622:	464a      	mov	r2, r9
 8003624:	f000 fabe 	bl	8003ba4 <memcpy>
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800362e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	6126      	str	r6, [r4, #16]
 8003636:	6165      	str	r5, [r4, #20]
 8003638:	444e      	add	r6, r9
 800363a:	eba5 0509 	sub.w	r5, r5, r9
 800363e:	6026      	str	r6, [r4, #0]
 8003640:	60a5      	str	r5, [r4, #8]
 8003642:	463e      	mov	r6, r7
 8003644:	42be      	cmp	r6, r7
 8003646:	d900      	bls.n	800364a <__ssputs_r+0x86>
 8003648:	463e      	mov	r6, r7
 800364a:	4632      	mov	r2, r6
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	4641      	mov	r1, r8
 8003650:	f000 fab6 	bl	8003bc0 <memmove>
 8003654:	68a3      	ldr	r3, [r4, #8]
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	1b9b      	subs	r3, r3, r6
 800365a:	4432      	add	r2, r6
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	6022      	str	r2, [r4, #0]
 8003660:	2000      	movs	r0, #0
 8003662:	e7db      	b.n	800361c <__ssputs_r+0x58>
 8003664:	462a      	mov	r2, r5
 8003666:	f000 fb6f 	bl	8003d48 <_realloc_r>
 800366a:	4606      	mov	r6, r0
 800366c:	2800      	cmp	r0, #0
 800366e:	d1e1      	bne.n	8003634 <__ssputs_r+0x70>
 8003670:	6921      	ldr	r1, [r4, #16]
 8003672:	4650      	mov	r0, sl
 8003674:	f000 fabe 	bl	8003bf4 <_free_r>
 8003678:	e7c7      	b.n	800360a <__ssputs_r+0x46>
	...

0800367c <_svfiprintf_r>:
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	4698      	mov	r8, r3
 8003682:	898b      	ldrh	r3, [r1, #12]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	b09d      	sub	sp, #116	; 0x74
 8003688:	4607      	mov	r7, r0
 800368a:	460d      	mov	r5, r1
 800368c:	4614      	mov	r4, r2
 800368e:	d50e      	bpl.n	80036ae <_svfiprintf_r+0x32>
 8003690:	690b      	ldr	r3, [r1, #16]
 8003692:	b963      	cbnz	r3, 80036ae <_svfiprintf_r+0x32>
 8003694:	2140      	movs	r1, #64	; 0x40
 8003696:	f000 fafd 	bl	8003c94 <_malloc_r>
 800369a:	6028      	str	r0, [r5, #0]
 800369c:	6128      	str	r0, [r5, #16]
 800369e:	b920      	cbnz	r0, 80036aa <_svfiprintf_r+0x2e>
 80036a0:	230c      	movs	r3, #12
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a8:	e0d1      	b.n	800384e <_svfiprintf_r+0x1d2>
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	616b      	str	r3, [r5, #20]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9309      	str	r3, [sp, #36]	; 0x24
 80036b2:	2320      	movs	r3, #32
 80036b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036bc:	2330      	movs	r3, #48	; 0x30
 80036be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003868 <_svfiprintf_r+0x1ec>
 80036c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036c6:	f04f 0901 	mov.w	r9, #1
 80036ca:	4623      	mov	r3, r4
 80036cc:	469a      	mov	sl, r3
 80036ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036d2:	b10a      	cbz	r2, 80036d8 <_svfiprintf_r+0x5c>
 80036d4:	2a25      	cmp	r2, #37	; 0x25
 80036d6:	d1f9      	bne.n	80036cc <_svfiprintf_r+0x50>
 80036d8:	ebba 0b04 	subs.w	fp, sl, r4
 80036dc:	d00b      	beq.n	80036f6 <_svfiprintf_r+0x7a>
 80036de:	465b      	mov	r3, fp
 80036e0:	4622      	mov	r2, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	4638      	mov	r0, r7
 80036e6:	f7ff ff6d 	bl	80035c4 <__ssputs_r>
 80036ea:	3001      	adds	r0, #1
 80036ec:	f000 80aa 	beq.w	8003844 <_svfiprintf_r+0x1c8>
 80036f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036f2:	445a      	add	r2, fp
 80036f4:	9209      	str	r2, [sp, #36]	; 0x24
 80036f6:	f89a 3000 	ldrb.w	r3, [sl]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80a2 	beq.w	8003844 <_svfiprintf_r+0x1c8>
 8003700:	2300      	movs	r3, #0
 8003702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800370a:	f10a 0a01 	add.w	sl, sl, #1
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	9307      	str	r3, [sp, #28]
 8003712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003716:	931a      	str	r3, [sp, #104]	; 0x68
 8003718:	4654      	mov	r4, sl
 800371a:	2205      	movs	r2, #5
 800371c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003720:	4851      	ldr	r0, [pc, #324]	; (8003868 <_svfiprintf_r+0x1ec>)
 8003722:	f7fc fd65 	bl	80001f0 <memchr>
 8003726:	9a04      	ldr	r2, [sp, #16]
 8003728:	b9d8      	cbnz	r0, 8003762 <_svfiprintf_r+0xe6>
 800372a:	06d0      	lsls	r0, r2, #27
 800372c:	bf44      	itt	mi
 800372e:	2320      	movmi	r3, #32
 8003730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003734:	0711      	lsls	r1, r2, #28
 8003736:	bf44      	itt	mi
 8003738:	232b      	movmi	r3, #43	; 0x2b
 800373a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800373e:	f89a 3000 	ldrb.w	r3, [sl]
 8003742:	2b2a      	cmp	r3, #42	; 0x2a
 8003744:	d015      	beq.n	8003772 <_svfiprintf_r+0xf6>
 8003746:	9a07      	ldr	r2, [sp, #28]
 8003748:	4654      	mov	r4, sl
 800374a:	2000      	movs	r0, #0
 800374c:	f04f 0c0a 	mov.w	ip, #10
 8003750:	4621      	mov	r1, r4
 8003752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003756:	3b30      	subs	r3, #48	; 0x30
 8003758:	2b09      	cmp	r3, #9
 800375a:	d94e      	bls.n	80037fa <_svfiprintf_r+0x17e>
 800375c:	b1b0      	cbz	r0, 800378c <_svfiprintf_r+0x110>
 800375e:	9207      	str	r2, [sp, #28]
 8003760:	e014      	b.n	800378c <_svfiprintf_r+0x110>
 8003762:	eba0 0308 	sub.w	r3, r0, r8
 8003766:	fa09 f303 	lsl.w	r3, r9, r3
 800376a:	4313      	orrs	r3, r2
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	46a2      	mov	sl, r4
 8003770:	e7d2      	b.n	8003718 <_svfiprintf_r+0x9c>
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	1d19      	adds	r1, r3, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	9103      	str	r1, [sp, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	bfbb      	ittet	lt
 800377e:	425b      	neglt	r3, r3
 8003780:	f042 0202 	orrlt.w	r2, r2, #2
 8003784:	9307      	strge	r3, [sp, #28]
 8003786:	9307      	strlt	r3, [sp, #28]
 8003788:	bfb8      	it	lt
 800378a:	9204      	strlt	r2, [sp, #16]
 800378c:	7823      	ldrb	r3, [r4, #0]
 800378e:	2b2e      	cmp	r3, #46	; 0x2e
 8003790:	d10c      	bne.n	80037ac <_svfiprintf_r+0x130>
 8003792:	7863      	ldrb	r3, [r4, #1]
 8003794:	2b2a      	cmp	r3, #42	; 0x2a
 8003796:	d135      	bne.n	8003804 <_svfiprintf_r+0x188>
 8003798:	9b03      	ldr	r3, [sp, #12]
 800379a:	1d1a      	adds	r2, r3, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	9203      	str	r2, [sp, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bfb8      	it	lt
 80037a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80037a8:	3402      	adds	r4, #2
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003878 <_svfiprintf_r+0x1fc>
 80037b0:	7821      	ldrb	r1, [r4, #0]
 80037b2:	2203      	movs	r2, #3
 80037b4:	4650      	mov	r0, sl
 80037b6:	f7fc fd1b 	bl	80001f0 <memchr>
 80037ba:	b140      	cbz	r0, 80037ce <_svfiprintf_r+0x152>
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	eba0 000a 	sub.w	r0, r0, sl
 80037c2:	fa03 f000 	lsl.w	r0, r3, r0
 80037c6:	9b04      	ldr	r3, [sp, #16]
 80037c8:	4303      	orrs	r3, r0
 80037ca:	3401      	adds	r4, #1
 80037cc:	9304      	str	r3, [sp, #16]
 80037ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d2:	4826      	ldr	r0, [pc, #152]	; (800386c <_svfiprintf_r+0x1f0>)
 80037d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037d8:	2206      	movs	r2, #6
 80037da:	f7fc fd09 	bl	80001f0 <memchr>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d038      	beq.n	8003854 <_svfiprintf_r+0x1d8>
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <_svfiprintf_r+0x1f4>)
 80037e4:	bb1b      	cbnz	r3, 800382e <_svfiprintf_r+0x1b2>
 80037e6:	9b03      	ldr	r3, [sp, #12]
 80037e8:	3307      	adds	r3, #7
 80037ea:	f023 0307 	bic.w	r3, r3, #7
 80037ee:	3308      	adds	r3, #8
 80037f0:	9303      	str	r3, [sp, #12]
 80037f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f4:	4433      	add	r3, r6
 80037f6:	9309      	str	r3, [sp, #36]	; 0x24
 80037f8:	e767      	b.n	80036ca <_svfiprintf_r+0x4e>
 80037fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80037fe:	460c      	mov	r4, r1
 8003800:	2001      	movs	r0, #1
 8003802:	e7a5      	b.n	8003750 <_svfiprintf_r+0xd4>
 8003804:	2300      	movs	r3, #0
 8003806:	3401      	adds	r4, #1
 8003808:	9305      	str	r3, [sp, #20]
 800380a:	4619      	mov	r1, r3
 800380c:	f04f 0c0a 	mov.w	ip, #10
 8003810:	4620      	mov	r0, r4
 8003812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003816:	3a30      	subs	r2, #48	; 0x30
 8003818:	2a09      	cmp	r2, #9
 800381a:	d903      	bls.n	8003824 <_svfiprintf_r+0x1a8>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0c5      	beq.n	80037ac <_svfiprintf_r+0x130>
 8003820:	9105      	str	r1, [sp, #20]
 8003822:	e7c3      	b.n	80037ac <_svfiprintf_r+0x130>
 8003824:	fb0c 2101 	mla	r1, ip, r1, r2
 8003828:	4604      	mov	r4, r0
 800382a:	2301      	movs	r3, #1
 800382c:	e7f0      	b.n	8003810 <_svfiprintf_r+0x194>
 800382e:	ab03      	add	r3, sp, #12
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	462a      	mov	r2, r5
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <_svfiprintf_r+0x1f8>)
 8003836:	a904      	add	r1, sp, #16
 8003838:	4638      	mov	r0, r7
 800383a:	f3af 8000 	nop.w
 800383e:	1c42      	adds	r2, r0, #1
 8003840:	4606      	mov	r6, r0
 8003842:	d1d6      	bne.n	80037f2 <_svfiprintf_r+0x176>
 8003844:	89ab      	ldrh	r3, [r5, #12]
 8003846:	065b      	lsls	r3, r3, #25
 8003848:	f53f af2c 	bmi.w	80036a4 <_svfiprintf_r+0x28>
 800384c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384e:	b01d      	add	sp, #116	; 0x74
 8003850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003854:	ab03      	add	r3, sp, #12
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	462a      	mov	r2, r5
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <_svfiprintf_r+0x1f8>)
 800385c:	a904      	add	r1, sp, #16
 800385e:	4638      	mov	r0, r7
 8003860:	f000 f87a 	bl	8003958 <_printf_i>
 8003864:	e7eb      	b.n	800383e <_svfiprintf_r+0x1c2>
 8003866:	bf00      	nop
 8003868:	0800406d 	.word	0x0800406d
 800386c:	08004077 	.word	0x08004077
 8003870:	00000000 	.word	0x00000000
 8003874:	080035c5 	.word	0x080035c5
 8003878:	08004073 	.word	0x08004073

0800387c <_printf_common>:
 800387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003880:	4616      	mov	r6, r2
 8003882:	4699      	mov	r9, r3
 8003884:	688a      	ldr	r2, [r1, #8]
 8003886:	690b      	ldr	r3, [r1, #16]
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	4293      	cmp	r3, r2
 800388e:	bfb8      	it	lt
 8003890:	4613      	movlt	r3, r2
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003898:	4607      	mov	r7, r0
 800389a:	460c      	mov	r4, r1
 800389c:	b10a      	cbz	r2, 80038a2 <_printf_common+0x26>
 800389e:	3301      	adds	r3, #1
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	0699      	lsls	r1, r3, #26
 80038a6:	bf42      	ittt	mi
 80038a8:	6833      	ldrmi	r3, [r6, #0]
 80038aa:	3302      	addmi	r3, #2
 80038ac:	6033      	strmi	r3, [r6, #0]
 80038ae:	6825      	ldr	r5, [r4, #0]
 80038b0:	f015 0506 	ands.w	r5, r5, #6
 80038b4:	d106      	bne.n	80038c4 <_printf_common+0x48>
 80038b6:	f104 0a19 	add.w	sl, r4, #25
 80038ba:	68e3      	ldr	r3, [r4, #12]
 80038bc:	6832      	ldr	r2, [r6, #0]
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	42ab      	cmp	r3, r5
 80038c2:	dc26      	bgt.n	8003912 <_printf_common+0x96>
 80038c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038c8:	1e13      	subs	r3, r2, #0
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	bf18      	it	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	0692      	lsls	r2, r2, #26
 80038d2:	d42b      	bmi.n	800392c <_printf_common+0xb0>
 80038d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d8:	4649      	mov	r1, r9
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d01e      	beq.n	8003920 <_printf_common+0xa4>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	68e5      	ldr	r5, [r4, #12]
 80038e6:	6832      	ldr	r2, [r6, #0]
 80038e8:	f003 0306 	and.w	r3, r3, #6
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	bf08      	it	eq
 80038f0:	1aad      	subeq	r5, r5, r2
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	6922      	ldr	r2, [r4, #16]
 80038f6:	bf0c      	ite	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	2500      	movne	r5, #0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfc4      	itt	gt
 8003902:	1a9b      	subgt	r3, r3, r2
 8003904:	18ed      	addgt	r5, r5, r3
 8003906:	2600      	movs	r6, #0
 8003908:	341a      	adds	r4, #26
 800390a:	42b5      	cmp	r5, r6
 800390c:	d11a      	bne.n	8003944 <_printf_common+0xc8>
 800390e:	2000      	movs	r0, #0
 8003910:	e008      	b.n	8003924 <_printf_common+0xa8>
 8003912:	2301      	movs	r3, #1
 8003914:	4652      	mov	r2, sl
 8003916:	4649      	mov	r1, r9
 8003918:	4638      	mov	r0, r7
 800391a:	47c0      	blx	r8
 800391c:	3001      	adds	r0, #1
 800391e:	d103      	bne.n	8003928 <_printf_common+0xac>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	3501      	adds	r5, #1
 800392a:	e7c6      	b.n	80038ba <_printf_common+0x3e>
 800392c:	18e1      	adds	r1, r4, r3
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	2030      	movs	r0, #48	; 0x30
 8003932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003936:	4422      	add	r2, r4
 8003938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800393c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003940:	3302      	adds	r3, #2
 8003942:	e7c7      	b.n	80038d4 <_printf_common+0x58>
 8003944:	2301      	movs	r3, #1
 8003946:	4622      	mov	r2, r4
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d0e6      	beq.n	8003920 <_printf_common+0xa4>
 8003952:	3601      	adds	r6, #1
 8003954:	e7d9      	b.n	800390a <_printf_common+0x8e>
	...

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	460c      	mov	r4, r1
 800395e:	4691      	mov	r9, r2
 8003960:	7e27      	ldrb	r7, [r4, #24]
 8003962:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003964:	2f78      	cmp	r7, #120	; 0x78
 8003966:	4680      	mov	r8, r0
 8003968:	469a      	mov	sl, r3
 800396a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	; 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d8 	beq.w	8003b2a <_printf_i+0x1d2>
 800397a:	2f58      	cmp	r7, #88	; 0x58
 800397c:	f000 80a3 	beq.w	8003ac6 <_printf_i+0x16e>
 8003980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a001      	add	r0, pc, #4	; (adr r0, 8003998 <_printf_i+0x40>)
 8003994:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b11 	.word	0x08003b11
 80039c8:	08003a35 	.word	0x08003a35
 80039cc:	08003af3 	.word	0x08003af3
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b33 	.word	0x08003b33
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003afb 	.word	0x08003afb
 80039f0:	680b      	ldr	r3, [r1, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	600a      	str	r2, [r1, #0]
 80039f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a3      	b.n	8003b4c <_printf_i+0x1f4>
 8003a04:	6825      	ldr	r5, [r4, #0]
 8003a06:	6808      	ldr	r0, [r1, #0]
 8003a08:	062e      	lsls	r6, r5, #24
 8003a0a:	f100 0304 	add.w	r3, r0, #4
 8003a0e:	d50a      	bpl.n	8003a26 <_printf_i+0xce>
 8003a10:	6805      	ldr	r5, [r0, #0]
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	da03      	bge.n	8003a20 <_printf_i+0xc8>
 8003a18:	232d      	movs	r3, #45	; 0x2d
 8003a1a:	426d      	negs	r5, r5
 8003a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a20:	485e      	ldr	r0, [pc, #376]	; (8003b9c <_printf_i+0x244>)
 8003a22:	230a      	movs	r3, #10
 8003a24:	e019      	b.n	8003a5a <_printf_i+0x102>
 8003a26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a2a:	6805      	ldr	r5, [r0, #0]
 8003a2c:	600b      	str	r3, [r1, #0]
 8003a2e:	bf18      	it	ne
 8003a30:	b22d      	sxthne	r5, r5
 8003a32:	e7ef      	b.n	8003a14 <_printf_i+0xbc>
 8003a34:	680b      	ldr	r3, [r1, #0]
 8003a36:	6825      	ldr	r5, [r4, #0]
 8003a38:	1d18      	adds	r0, r3, #4
 8003a3a:	6008      	str	r0, [r1, #0]
 8003a3c:	0628      	lsls	r0, r5, #24
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0xec>
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0xf2>
 8003a44:	0669      	lsls	r1, r5, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0xe8>
 8003a48:	881d      	ldrh	r5, [r3, #0]
 8003a4a:	4854      	ldr	r0, [pc, #336]	; (8003b9c <_printf_i+0x244>)
 8003a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a4e:	bf0c      	ite	eq
 8003a50:	2308      	moveq	r3, #8
 8003a52:	230a      	movne	r3, #10
 8003a54:	2100      	movs	r1, #0
 8003a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a5a:	6866      	ldr	r6, [r4, #4]
 8003a5c:	60a6      	str	r6, [r4, #8]
 8003a5e:	2e00      	cmp	r6, #0
 8003a60:	bfa2      	ittt	ge
 8003a62:	6821      	ldrge	r1, [r4, #0]
 8003a64:	f021 0104 	bicge.w	r1, r1, #4
 8003a68:	6021      	strge	r1, [r4, #0]
 8003a6a:	b90d      	cbnz	r5, 8003a70 <_printf_i+0x118>
 8003a6c:	2e00      	cmp	r6, #0
 8003a6e:	d04d      	beq.n	8003b0c <_printf_i+0x1b4>
 8003a70:	4616      	mov	r6, r2
 8003a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a76:	fb03 5711 	mls	r7, r3, r1, r5
 8003a7a:	5dc7      	ldrb	r7, [r0, r7]
 8003a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a80:	462f      	mov	r7, r5
 8003a82:	42bb      	cmp	r3, r7
 8003a84:	460d      	mov	r5, r1
 8003a86:	d9f4      	bls.n	8003a72 <_printf_i+0x11a>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d10b      	bne.n	8003aa4 <_printf_i+0x14c>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	07df      	lsls	r7, r3, #31
 8003a90:	d508      	bpl.n	8003aa4 <_printf_i+0x14c>
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	6861      	ldr	r1, [r4, #4]
 8003a96:	4299      	cmp	r1, r3
 8003a98:	bfde      	ittt	le
 8003a9a:	2330      	movle	r3, #48	; 0x30
 8003a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aa0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003aa4:	1b92      	subs	r2, r2, r6
 8003aa6:	6122      	str	r2, [r4, #16]
 8003aa8:	f8cd a000 	str.w	sl, [sp]
 8003aac:	464b      	mov	r3, r9
 8003aae:	aa03      	add	r2, sp, #12
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f7ff fee2 	bl	800387c <_printf_common>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d14c      	bne.n	8003b56 <_printf_i+0x1fe>
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac0:	b004      	add	sp, #16
 8003ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac6:	4835      	ldr	r0, [pc, #212]	; (8003b9c <_printf_i+0x244>)
 8003ac8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	680e      	ldr	r6, [r1, #0]
 8003ad0:	061f      	lsls	r7, r3, #24
 8003ad2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ad6:	600e      	str	r6, [r1, #0]
 8003ad8:	d514      	bpl.n	8003b04 <_printf_i+0x1ac>
 8003ada:	07d9      	lsls	r1, r3, #31
 8003adc:	bf44      	itt	mi
 8003ade:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae2:	6023      	strmi	r3, [r4, #0]
 8003ae4:	b91d      	cbnz	r5, 8003aee <_printf_i+0x196>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f023 0320 	bic.w	r3, r3, #32
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	2310      	movs	r3, #16
 8003af0:	e7b0      	b.n	8003a54 <_printf_i+0xfc>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	2378      	movs	r3, #120	; 0x78
 8003afc:	4828      	ldr	r0, [pc, #160]	; (8003ba0 <_printf_i+0x248>)
 8003afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b02:	e7e3      	b.n	8003acc <_printf_i+0x174>
 8003b04:	065e      	lsls	r6, r3, #25
 8003b06:	bf48      	it	mi
 8003b08:	b2ad      	uxthmi	r5, r5
 8003b0a:	e7e6      	b.n	8003ada <_printf_i+0x182>
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	e7bb      	b.n	8003a88 <_printf_i+0x130>
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	6826      	ldr	r6, [r4, #0]
 8003b14:	6960      	ldr	r0, [r4, #20]
 8003b16:	1d1d      	adds	r5, r3, #4
 8003b18:	600d      	str	r5, [r1, #0]
 8003b1a:	0635      	lsls	r5, r6, #24
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0x1cc>
 8003b20:	6018      	str	r0, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0x1d2>
 8003b24:	0671      	lsls	r1, r6, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0x1c8>
 8003b28:	8018      	strh	r0, [r3, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	4616      	mov	r6, r2
 8003b30:	e7ba      	b.n	8003aa8 <_printf_i+0x150>
 8003b32:	680b      	ldr	r3, [r1, #0]
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	600a      	str	r2, [r1, #0]
 8003b38:	681e      	ldr	r6, [r3, #0]
 8003b3a:	6862      	ldr	r2, [r4, #4]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7fc fb56 	bl	80001f0 <memchr>
 8003b44:	b108      	cbz	r0, 8003b4a <_printf_i+0x1f2>
 8003b46:	1b80      	subs	r0, r0, r6
 8003b48:	6060      	str	r0, [r4, #4]
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	6123      	str	r3, [r4, #16]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b54:	e7a8      	b.n	8003aa8 <_printf_i+0x150>
 8003b56:	6923      	ldr	r3, [r4, #16]
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	47d0      	blx	sl
 8003b60:	3001      	adds	r0, #1
 8003b62:	d0ab      	beq.n	8003abc <_printf_i+0x164>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	079b      	lsls	r3, r3, #30
 8003b68:	d413      	bmi.n	8003b92 <_printf_i+0x23a>
 8003b6a:	68e0      	ldr	r0, [r4, #12]
 8003b6c:	9b03      	ldr	r3, [sp, #12]
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	bfb8      	it	lt
 8003b72:	4618      	movlt	r0, r3
 8003b74:	e7a4      	b.n	8003ac0 <_printf_i+0x168>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4632      	mov	r2, r6
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	47d0      	blx	sl
 8003b80:	3001      	adds	r0, #1
 8003b82:	d09b      	beq.n	8003abc <_printf_i+0x164>
 8003b84:	3501      	adds	r5, #1
 8003b86:	68e3      	ldr	r3, [r4, #12]
 8003b88:	9903      	ldr	r1, [sp, #12]
 8003b8a:	1a5b      	subs	r3, r3, r1
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	dcf2      	bgt.n	8003b76 <_printf_i+0x21e>
 8003b90:	e7eb      	b.n	8003b6a <_printf_i+0x212>
 8003b92:	2500      	movs	r5, #0
 8003b94:	f104 0619 	add.w	r6, r4, #25
 8003b98:	e7f5      	b.n	8003b86 <_printf_i+0x22e>
 8003b9a:	bf00      	nop
 8003b9c:	0800407e 	.word	0x0800407e
 8003ba0:	0800408f 	.word	0x0800408f

08003ba4 <memcpy>:
 8003ba4:	440a      	add	r2, r1
 8003ba6:	4291      	cmp	r1, r2
 8003ba8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bac:	d100      	bne.n	8003bb0 <memcpy+0xc>
 8003bae:	4770      	bx	lr
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bba:	4291      	cmp	r1, r2
 8003bbc:	d1f9      	bne.n	8003bb2 <memcpy+0xe>
 8003bbe:	bd10      	pop	{r4, pc}

08003bc0 <memmove>:
 8003bc0:	4288      	cmp	r0, r1
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	eb01 0402 	add.w	r4, r1, r2
 8003bc8:	d902      	bls.n	8003bd0 <memmove+0x10>
 8003bca:	4284      	cmp	r4, r0
 8003bcc:	4623      	mov	r3, r4
 8003bce:	d807      	bhi.n	8003be0 <memmove+0x20>
 8003bd0:	1e43      	subs	r3, r0, #1
 8003bd2:	42a1      	cmp	r1, r4
 8003bd4:	d008      	beq.n	8003be8 <memmove+0x28>
 8003bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bde:	e7f8      	b.n	8003bd2 <memmove+0x12>
 8003be0:	4402      	add	r2, r0
 8003be2:	4601      	mov	r1, r0
 8003be4:	428a      	cmp	r2, r1
 8003be6:	d100      	bne.n	8003bea <memmove+0x2a>
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bf2:	e7f7      	b.n	8003be4 <memmove+0x24>

08003bf4 <_free_r>:
 8003bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	d048      	beq.n	8003c8c <_free_r+0x98>
 8003bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfe:	9001      	str	r0, [sp, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f1a1 0404 	sub.w	r4, r1, #4
 8003c06:	bfb8      	it	lt
 8003c08:	18e4      	addlt	r4, r4, r3
 8003c0a:	f000 f8d3 	bl	8003db4 <__malloc_lock>
 8003c0e:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <_free_r+0x9c>)
 8003c10:	9801      	ldr	r0, [sp, #4]
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	4615      	mov	r5, r2
 8003c16:	b933      	cbnz	r3, 8003c26 <_free_r+0x32>
 8003c18:	6063      	str	r3, [r4, #4]
 8003c1a:	6014      	str	r4, [r2, #0]
 8003c1c:	b003      	add	sp, #12
 8003c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c22:	f000 b8cd 	b.w	8003dc0 <__malloc_unlock>
 8003c26:	42a3      	cmp	r3, r4
 8003c28:	d90b      	bls.n	8003c42 <_free_r+0x4e>
 8003c2a:	6821      	ldr	r1, [r4, #0]
 8003c2c:	1862      	adds	r2, r4, r1
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bf04      	itt	eq
 8003c32:	681a      	ldreq	r2, [r3, #0]
 8003c34:	685b      	ldreq	r3, [r3, #4]
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	bf04      	itt	eq
 8003c3a:	1852      	addeq	r2, r2, r1
 8003c3c:	6022      	streq	r2, [r4, #0]
 8003c3e:	602c      	str	r4, [r5, #0]
 8003c40:	e7ec      	b.n	8003c1c <_free_r+0x28>
 8003c42:	461a      	mov	r2, r3
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b10b      	cbz	r3, 8003c4c <_free_r+0x58>
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d9fa      	bls.n	8003c42 <_free_r+0x4e>
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	1855      	adds	r5, r2, r1
 8003c50:	42a5      	cmp	r5, r4
 8003c52:	d10b      	bne.n	8003c6c <_free_r+0x78>
 8003c54:	6824      	ldr	r4, [r4, #0]
 8003c56:	4421      	add	r1, r4
 8003c58:	1854      	adds	r4, r2, r1
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	d1dd      	bne.n	8003c1c <_free_r+0x28>
 8003c60:	681c      	ldr	r4, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	4421      	add	r1, r4
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	e7d7      	b.n	8003c1c <_free_r+0x28>
 8003c6c:	d902      	bls.n	8003c74 <_free_r+0x80>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	6003      	str	r3, [r0, #0]
 8003c72:	e7d3      	b.n	8003c1c <_free_r+0x28>
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1961      	adds	r1, r4, r5
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf04      	itt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	bf04      	itt	eq
 8003c84:	1949      	addeq	r1, r1, r5
 8003c86:	6021      	streq	r1, [r4, #0]
 8003c88:	6054      	str	r4, [r2, #4]
 8003c8a:	e7c7      	b.n	8003c1c <_free_r+0x28>
 8003c8c:	b003      	add	sp, #12
 8003c8e:	bd30      	pop	{r4, r5, pc}
 8003c90:	200000c4 	.word	0x200000c4

08003c94 <_malloc_r>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	1ccd      	adds	r5, r1, #3
 8003c98:	f025 0503 	bic.w	r5, r5, #3
 8003c9c:	3508      	adds	r5, #8
 8003c9e:	2d0c      	cmp	r5, #12
 8003ca0:	bf38      	it	cc
 8003ca2:	250c      	movcc	r5, #12
 8003ca4:	2d00      	cmp	r5, #0
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	db01      	blt.n	8003cae <_malloc_r+0x1a>
 8003caa:	42a9      	cmp	r1, r5
 8003cac:	d903      	bls.n	8003cb6 <_malloc_r+0x22>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	6033      	str	r3, [r6, #0]
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb6:	f000 f87d 	bl	8003db4 <__malloc_lock>
 8003cba:	4921      	ldr	r1, [pc, #132]	; (8003d40 <_malloc_r+0xac>)
 8003cbc:	680a      	ldr	r2, [r1, #0]
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	b99c      	cbnz	r4, 8003cea <_malloc_r+0x56>
 8003cc2:	4f20      	ldr	r7, [pc, #128]	; (8003d44 <_malloc_r+0xb0>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b923      	cbnz	r3, 8003cd2 <_malloc_r+0x3e>
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 f862 	bl	8003d94 <_sbrk_r>
 8003cd0:	6038      	str	r0, [r7, #0]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f85d 	bl	8003d94 <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d123      	bne.n	8003d26 <_malloc_r+0x92>
 8003cde:	230c      	movs	r3, #12
 8003ce0:	6033      	str	r3, [r6, #0]
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 f86c 	bl	8003dc0 <__malloc_unlock>
 8003ce8:	e7e3      	b.n	8003cb2 <_malloc_r+0x1e>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	1b5b      	subs	r3, r3, r5
 8003cee:	d417      	bmi.n	8003d20 <_malloc_r+0x8c>
 8003cf0:	2b0b      	cmp	r3, #11
 8003cf2:	d903      	bls.n	8003cfc <_malloc_r+0x68>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	441c      	add	r4, r3
 8003cf8:	6025      	str	r5, [r4, #0]
 8003cfa:	e004      	b.n	8003d06 <_malloc_r+0x72>
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	42a2      	cmp	r2, r4
 8003d00:	bf0c      	ite	eq
 8003d02:	600b      	streq	r3, [r1, #0]
 8003d04:	6053      	strne	r3, [r2, #4]
 8003d06:	4630      	mov	r0, r6
 8003d08:	f000 f85a 	bl	8003dc0 <__malloc_unlock>
 8003d0c:	f104 000b 	add.w	r0, r4, #11
 8003d10:	1d23      	adds	r3, r4, #4
 8003d12:	f020 0007 	bic.w	r0, r0, #7
 8003d16:	1ac2      	subs	r2, r0, r3
 8003d18:	d0cc      	beq.n	8003cb4 <_malloc_r+0x20>
 8003d1a:	1a1b      	subs	r3, r3, r0
 8003d1c:	50a3      	str	r3, [r4, r2]
 8003d1e:	e7c9      	b.n	8003cb4 <_malloc_r+0x20>
 8003d20:	4622      	mov	r2, r4
 8003d22:	6864      	ldr	r4, [r4, #4]
 8003d24:	e7cc      	b.n	8003cc0 <_malloc_r+0x2c>
 8003d26:	1cc4      	adds	r4, r0, #3
 8003d28:	f024 0403 	bic.w	r4, r4, #3
 8003d2c:	42a0      	cmp	r0, r4
 8003d2e:	d0e3      	beq.n	8003cf8 <_malloc_r+0x64>
 8003d30:	1a21      	subs	r1, r4, r0
 8003d32:	4630      	mov	r0, r6
 8003d34:	f000 f82e 	bl	8003d94 <_sbrk_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d1dd      	bne.n	8003cf8 <_malloc_r+0x64>
 8003d3c:	e7cf      	b.n	8003cde <_malloc_r+0x4a>
 8003d3e:	bf00      	nop
 8003d40:	200000c4 	.word	0x200000c4
 8003d44:	200000c8 	.word	0x200000c8

08003d48 <_realloc_r>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	4607      	mov	r7, r0
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	460e      	mov	r6, r1
 8003d50:	b921      	cbnz	r1, 8003d5c <_realloc_r+0x14>
 8003d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d56:	4611      	mov	r1, r2
 8003d58:	f7ff bf9c 	b.w	8003c94 <_malloc_r>
 8003d5c:	b922      	cbnz	r2, 8003d68 <_realloc_r+0x20>
 8003d5e:	f7ff ff49 	bl	8003bf4 <_free_r>
 8003d62:	4625      	mov	r5, r4
 8003d64:	4628      	mov	r0, r5
 8003d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d68:	f000 f830 	bl	8003dcc <_malloc_usable_size_r>
 8003d6c:	42a0      	cmp	r0, r4
 8003d6e:	d20f      	bcs.n	8003d90 <_realloc_r+0x48>
 8003d70:	4621      	mov	r1, r4
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7ff ff8e 	bl	8003c94 <_malloc_r>
 8003d78:	4605      	mov	r5, r0
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d0f2      	beq.n	8003d64 <_realloc_r+0x1c>
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4622      	mov	r2, r4
 8003d82:	f7ff ff0f 	bl	8003ba4 <memcpy>
 8003d86:	4631      	mov	r1, r6
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f7ff ff33 	bl	8003bf4 <_free_r>
 8003d8e:	e7e9      	b.n	8003d64 <_realloc_r+0x1c>
 8003d90:	4635      	mov	r5, r6
 8003d92:	e7e7      	b.n	8003d64 <_realloc_r+0x1c>

08003d94 <_sbrk_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	; (8003db0 <_sbrk_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fd f8d0 	bl	8000f44 <_sbrk>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_sbrk_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_sbrk_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000160 	.word	0x20000160

08003db4 <__malloc_lock>:
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <__malloc_lock+0x8>)
 8003db6:	f000 b811 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 8003dba:	bf00      	nop
 8003dbc:	20000168 	.word	0x20000168

08003dc0 <__malloc_unlock>:
 8003dc0:	4801      	ldr	r0, [pc, #4]	; (8003dc8 <__malloc_unlock+0x8>)
 8003dc2:	f000 b80c 	b.w	8003dde <__retarget_lock_release_recursive>
 8003dc6:	bf00      	nop
 8003dc8:	20000168 	.word	0x20000168

08003dcc <_malloc_usable_size_r>:
 8003dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd0:	1f18      	subs	r0, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bfbc      	itt	lt
 8003dd6:	580b      	ldrlt	r3, [r1, r0]
 8003dd8:	18c0      	addlt	r0, r0, r3
 8003dda:	4770      	bx	lr

08003ddc <__retarget_lock_acquire_recursive>:
 8003ddc:	4770      	bx	lr

08003dde <__retarget_lock_release_recursive>:
 8003dde:	4770      	bx	lr

08003de0 <_init>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr

08003dec <_fini>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr
